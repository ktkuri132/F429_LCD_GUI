ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
  20              		.section	.text.PWR_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	PWR_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	PWR_DeInit:
  28              	.LFB123:
   1:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.8.1
   6:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    27-January-2022
   7:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Backup Domain Access
  10:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + PVD configuration
  11:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + WakeUp pin configuration
  12:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Main and Backup Regulators configuration
  13:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + FLASH Power Down configuration
  14:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Low Power modes configuration
  15:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Flags management
  16:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Copyright (c) 2016 STMicroelectronics.
  21:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * All rights reserved.
  22:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  23:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  24:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * in the root directory of this software component.
  25:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  26:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  28:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  29:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  30:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 2


  31:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  32:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  33:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  34:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  35:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  36:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  37:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  38:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  39:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  40:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  41:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  42:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  43:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  44:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  45:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  46:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  47:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  48:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  49:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  50:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  51:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  52:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  53:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  54:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  55:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  56:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  57:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  58:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  59:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  60:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  61:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  62:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  63:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  64:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  65:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  66:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  67:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of ODEN bit */
  68:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define ODEN_BitNumber           0x10
  69:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_ODEN_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODEN_BitNumber * 4))
  70:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of ODSWEN bit */
  72:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define ODSWEN_BitNumber         0x11
  73:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_ODSWEN_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODSWEN_BitNumber * 4))
  74:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  75:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
  76:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of MRUDS bit */
  77:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define MRUDS_BitNumber         0x0B
  78:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_MRUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRUDS_BitNumber * 4))
  79:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of LPUDS bit */
  81:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define LPUDS_BitNumber         0x0A
  82:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_LPUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPUDS_BitNumber * 4))
  83:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
  84:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  85:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
  86:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of MRLVDS bit */
  87:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define MRLVDS_BitNumber         0x0B
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 3


  88:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_MRLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRLVDS_BitNumber * 4))
  89:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  90:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of LPLVDS bit */
  91:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define LPLVDS_BitNumber         0x0A
  92:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_LPLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPLVDS_BitNumber * 4))
  93:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
  94:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  96:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
  97:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  98:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  99:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
 100:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
 101:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F410xx || STM
 102:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 104:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP2 bit */
 105:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
 106:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP1_BitNumber           0x08
 107:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP1_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP1_BitNumber * 4))
 108:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP2_BitNumber           0x07
 109:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP2_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 110:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx)
 111:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP3_BitNumber           0x06
 112:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP3_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 113:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx */
 114:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 115:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 116:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
 117:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
 118:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
 119:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 120:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
 121:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 122:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
 123:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFF3FC)
 124:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
 125:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_VOS_MASK              ((uint32_t)0xFFFF3FFF)
 126:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 127:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
 128:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
 129:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 130:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
 131:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 132:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
 133:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 134:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 136:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 137:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Backup Domain Access function  
 138:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 139:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 140:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 141:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                   ##### Backup Domain Access function #####
 142:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 143:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 144:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 4


 145:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
 146:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       write accesses. 
 147:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 148:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 149:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             RCC_APB1PeriphClockCmd() function.
 150:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 151:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 152:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 153:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 154:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 155:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 156:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 157:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 158:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 159:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 160:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 161:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 162:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  29              		.loc 1 162 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 163:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  38              		.loc 1 163 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
 164:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 164 3 view .LVU2
  44 000c 0021     		movs	r1, #0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
 165:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 165 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	1
  55              		.global	PWR_BackupAccessCmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	PWR_BackupAccessCmd:
  61              	.LVL2:
  62              	.LFB124:
 166:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 167:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 168:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 169:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 5


 170:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 171:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 172:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 173:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 174:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 175:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 176:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 177:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  63              		.loc 1 177 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
 178:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 179:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  68              		.loc 1 179 3 view .LVU5
 180:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 181:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  69              		.loc 1 181 3 view .LVU6
  70              		.loc 1 181 32 is_stmt 0 view .LVU7
  71 0000 014B     		ldr	r3, .L4
  72 0002 1862     		str	r0, [r3, #32]
 182:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  73              		.loc 1 182 1 view .LVU8
  74 0004 7047     		bx	lr
  75              	.L5:
  76 0006 00BF     		.align	2
  77              	.L4:
  78 0008 00000E42 		.word	1108213760
  79              		.cfi_endproc
  80              	.LFE124:
  82              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  83              		.align	1
  84              		.global	PWR_PVDLevelConfig
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	PWR_PVDLevelConfig:
  90              	.LVL3:
  91              	.LFB125:
 183:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 184:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 185:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 186:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 187:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 188:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 189:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   PVD configuration functions 
 190:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 191:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 192:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 193:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     ##### PVD configuration functions #####
 194:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 195:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 196:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 197:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 198:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 199:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 6


 200:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           line16 and can generate an interrupt if enabled through the EXTI registers.
 201:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The PVD is stopped in Standby mode.
 202:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 203:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 204:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 205:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 207:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 208:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 209:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 210:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 211:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 212:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 213:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 214:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 215:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 216:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 217:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 218:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 219:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 220:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 221:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         detection level.
 222:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 223:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 224:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 225:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  92              		.loc 1 225 1 is_stmt 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
 226:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
  97              		.loc 1 226 3 view .LVU10
 227:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 228:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 229:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  98              		.loc 1 229 3 view .LVU11
 230:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 231:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
  99              		.loc 1 231 3 view .LVU12
 100              		.loc 1 231 10 is_stmt 0 view .LVU13
 101 0000 034A     		ldr	r2, .L7
 102 0002 1368     		ldr	r3, [r2]
 103              	.LVL4:
 232:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 233:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 234:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 104              		.loc 1 234 3 is_stmt 1 view .LVU14
 105              		.loc 1 234 10 is_stmt 0 view .LVU15
 106 0004 23F0E003 		bic	r3, r3, #224
 107              	.LVL5:
 235:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 236:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 237:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 108              		.loc 1 237 3 is_stmt 1 view .LVU16
 109              		.loc 1 237 10 is_stmt 0 view .LVU17
 110 0008 0343     		orrs	r3, r3, r0
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 7


 111              	.LVL6:
 238:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 239:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 240:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 112              		.loc 1 240 3 is_stmt 1 view .LVU18
 113              		.loc 1 240 11 is_stmt 0 view .LVU19
 114 000a 1360     		str	r3, [r2]
 241:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 115              		.loc 1 241 1 view .LVU20
 116 000c 7047     		bx	lr
 117              	.L8:
 118 000e 00BF     		.align	2
 119              	.L7:
 120 0010 00700040 		.word	1073770496
 121              		.cfi_endproc
 122              	.LFE125:
 124              		.section	.text.PWR_PVDCmd,"ax",%progbits
 125              		.align	1
 126              		.global	PWR_PVDCmd
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	PWR_PVDCmd:
 132              	.LVL7:
 133              	.LFB126:
 242:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 243:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 244:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 245:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 246:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 247:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 248:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 249:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 250:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 134              		.loc 1 250 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 251:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 252:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 139              		.loc 1 252 3 view .LVU22
 253:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 254:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 140              		.loc 1 254 3 view .LVU23
 141              		.loc 1 254 33 is_stmt 0 view .LVU24
 142 0000 014B     		ldr	r3, .L10
 143 0002 1861     		str	r0, [r3, #16]
 255:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 144              		.loc 1 255 1 view .LVU25
 145 0004 7047     		bx	lr
 146              	.L11:
 147 0006 00BF     		.align	2
 148              	.L10:
 149 0008 00000E42 		.word	1108213760
 150              		.cfi_endproc
 151              	.LFE126:
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 8


 153              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 154              		.align	1
 155              		.global	PWR_WakeUpPinCmd
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	PWR_WakeUpPinCmd:
 161              	.LVL8:
 162              	.LFB127:
 256:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 257:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 258:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 259:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 260:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 261:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 262:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   WakeUp pin configuration functions 
 263:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 264:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 265:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 266:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  ##### WakeUp pin configuration functions #####
 267:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 268:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 269:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 270:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 271:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 272:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 273:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (++) For STM32F410xx/STM32F412xG/STM32F413_423xx there are three Wake-Up pins: Pin1 on P
 274:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 275:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 276:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 277:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 278:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 279:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 280:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 281:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 282:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 283:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 284:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 285:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 163              		.loc 1 285 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 286:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 287:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 168              		.loc 1 287 3 view .LVU27
 288:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 289:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 169              		.loc 1 289 3 view .LVU28
 170              		.loc 1 289 34 is_stmt 0 view .LVU29
 171 0000 014B     		ldr	r3, .L13
 172 0002 C3F8A000 		str	r0, [r3, #160]
 290:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 173              		.loc 1 290 1 view .LVU30
 174 0006 7047     		bx	lr
 175              	.L14:
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 9


 176              		.align	2
 177              	.L13:
 178 0008 00000E42 		.word	1108213760
 179              		.cfi_endproc
 180              	.LFE127:
 182              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 183              		.align	1
 184              		.global	PWR_BackupRegulatorCmd
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 189              	PWR_BackupRegulatorCmd:
 190              	.LVL9:
 191              	.LFB128:
 291:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 292:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 293:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 294:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 295:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 296:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_WakeUpPinx: specifies the WakeUp Pin.
 297:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 298:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin1: WKUP1 pin is used for wakeup from Standby mode.
 299:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin2: WKUP2 pin is used for wakeup from Standby mode.
 300:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin3: WKUP3 pin is used for wakeup from Standby mode.(only for STM32
 301:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 302:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 303:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 304:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 305:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPinx, FunctionalState NewState)
 306:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 307:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 308:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 309:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(NewState));
 310:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_WakeUpPinx == PWR_WakeUp_Pin1) /* PWR_WakeUp_Pin1 */
 311:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 312:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP1_BB = (uint32_t)NewState;
 313:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 314:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx)|| defined(STM32F412xG) || defined(STM32F413_423xx)  
 315:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else if(PWR_WakeUpPinx == PWR_WakeUp_Pin3) /* PWR_WakeUp_Pin3 */
 316:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 317:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP3_BB = (uint32_t)NewState;
 318:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 319:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx */  
 320:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else /* PWR_WakeUp_Pin2 */
 321:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 322:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP2_BB = (uint32_t)NewState;
 323:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 324:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 325:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 326:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 327:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 328:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 329:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 330:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 331:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 332:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Main and Backup Regulators configuration functions 
 333:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 10


 334:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 335:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 336:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           ##### Main and Backup Regulators configuration functions #####
 337:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 338:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 339:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
 340:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
 341:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           retained even in Standby or VBAT mode when the low power backup regulator
 342:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
 343:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           always present. You can use the PWR_BackupRegulatorCmd() function to 
 344:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           enable the low power backup regulator and use the PWR_GetFlagStatus
 345:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (PWR_FLAG_BRR) to check if it is ready or not. 
 346:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 347:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
 348:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 349:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           save battery life.
 350:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 351:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The backup SRAM is not mass erased by an tamper event. It is read 
 352:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           protected to prevent confidential data, such as cryptographic private 
 353:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           key, from being accessed. The backup SRAM can be erased only through 
 354:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the Flash interface when a protection level change from level 1 to 
 355:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           level 0 is requested. 
 356:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       -@- Refer to the description of Read protection (RDP) in the reference manual.
 357:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 358:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The main internal regulator can be configured to have a tradeoff between 
 359:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           performance and power consumption when the device does not operate at 
 360:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the maximum frequency. 
 361:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) For STM32F405xx/407xx and STM32F415xx/417xx  Devices, the regulator can be     
 362:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           configured on the fly through PWR_MainRegulatorModeConfig() function which  
 363:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           configure VOS bit in PWR_CR register:
 364:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When this bit is set (Regulator voltage output Scale 1 mode selected) 
 365:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 366:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 2 mode selected) 
 367:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.
 368:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              
 369:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the regulator can be configured through    
 370:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            PWR_MainRegulatorModeConfig() function which configure VOS[1:0] bits in
 371:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            PWR_CR register:  
 372:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            which configure VOS[1:0] bits in PWR_CR register: 
 373:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 11 (Regulator voltage output Scale 1 mode selected) 
 374:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 375:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 10 (Regulator voltage output Scale 2 mode selected) 
 376:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.  
 377:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 01 (Regulator voltage output Scale 3 mode selected) 
 378:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 120 MHz. 
 379:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                           
 380:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the scale can be modified only when the PLL 
 381:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            is OFF and the HSI or HSE clock source is selected as system clock. 
 382:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            The new value programmed is active only when the PLL is ON.
 383:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            When the PLL is OFF, the voltage scale 3 is automatically selected. 
 384:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         Refer to the datasheets for more details.
 385:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         
 386:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Run mode: the main regulator has
 387:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            2 operating modes available:
 388:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Normal mode: The CPU and core logic operate at maximum frequency at a given 
 389:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              voltage scaling (scale 1, scale 2 or scale 3)
 390:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Over-drive mode: This mode allows the CPU and the core logic to operate at a 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 11


 391:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             higher frequency than the normal mode for a given voltage scaling (scale 1,  
 392:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             scale 2 or scale 3). This mode is enabled through PWR_OverDriveCmd() function and
 393:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             PWR_OverDriveSWCmd() function, to enter or exit from Over-drive mode please follow 
 394:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             the sequence described in Reference manual.
 395:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              
 396:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Stop mode: the main regulator or low power regulator 
 397:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            supplies a low power voltage to the 1.2V domain, thus preserving the content of register
 398:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            and internal SRAM. 2 operating modes are available:
 399:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          (++) Normal mode: the 1.2V domain is preserved in nominal leakage mode. This mode is only 
 400:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is used in Scale 3 or 
 401:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               low voltage mode.
 402:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          (++) Under-drive mode: the 1.2V domain is preserved in reduced leakage mode. This mode is 
 403:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is in low voltage mode.
 404:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               This mode is enabled through PWR_UnderDriveCmd() function.
 405:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             
 406:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 407:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 408:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 409:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 410:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 411:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 412:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 413:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 414:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 415:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 416:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 417:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 192              		.loc 1 417 1 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 418:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 419:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 197              		.loc 1 419 3 view .LVU32
 420:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 421:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 198              		.loc 1 421 3 view .LVU33
 199              		.loc 1 421 33 is_stmt 0 view .LVU34
 200 0000 014B     		ldr	r3, .L16
 201 0002 C3F8A400 		str	r0, [r3, #164]
 422:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 202              		.loc 1 422 1 view .LVU35
 203 0006 7047     		bx	lr
 204              	.L17:
 205              		.align	2
 206              	.L16:
 207 0008 00000E42 		.word	1108213760
 208              		.cfi_endproc
 209              	.LFE128:
 211              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 212              		.align	1
 213              		.global	PWR_MainRegulatorModeConfig
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 218              	PWR_MainRegulatorModeConfig:
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 12


 219              	.LVL10:
 220              	.LFB129:
 423:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 424:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 425:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 426:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 427:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 428:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 429:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 430:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 431:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 432:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 433:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 434:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
 435:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 120 MHz (only for STM32F4
 436:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 437:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 438:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 439:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 221              		.loc 1 439 1 is_stmt 1 view -0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 440:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 226              		.loc 1 440 3 view .LVU37
 441:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 	
 442:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 443:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 227              		.loc 1 443 3 view .LVU38
 444:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 445:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 228              		.loc 1 445 3 view .LVU39
 229              		.loc 1 445 10 is_stmt 0 view .LVU40
 230 0000 034A     		ldr	r2, .L19
 231 0002 1368     		ldr	r3, [r2]
 232              	.LVL11:
 446:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 447:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear VOS[15:14] bits */
 448:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_VOS_MASK;
 233              		.loc 1 448 3 is_stmt 1 view .LVU41
 234              		.loc 1 448 10 is_stmt 0 view .LVU42
 235 0004 23F44043 		bic	r3, r3, #49152
 236              	.LVL12:
 449:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 450:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
 451:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator_Voltage;
 237              		.loc 1 451 3 is_stmt 1 view .LVU43
 238              		.loc 1 451 10 is_stmt 0 view .LVU44
 239 0008 0343     		orrs	r3, r3, r0
 240              	.LVL13:
 452:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 453:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 454:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 241              		.loc 1 454 3 is_stmt 1 view .LVU45
 242              		.loc 1 454 11 is_stmt 0 view .LVU46
 243 000a 1360     		str	r3, [r2]
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 13


 455:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 244              		.loc 1 455 1 view .LVU47
 245 000c 7047     		bx	lr
 246              	.L20:
 247 000e 00BF     		.align	2
 248              	.L19:
 249 0010 00700040 		.word	1073770496
 250              		.cfi_endproc
 251              	.LFE129:
 253              		.section	.text.PWR_OverDriveCmd,"ax",%progbits
 254              		.align	1
 255              		.global	PWR_OverDriveCmd
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 260              	PWR_OverDriveCmd:
 261              	.LVL14:
 262              	.LFB130:
 456:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 458:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive.
 459:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 460:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 461:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This mode allows the CPU and the core logic to operate at a higher frequency
 462:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).   
 463:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 464:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 465:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          critical tasks and when the system clock source is either HSI or HSE. 
 466:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          During the Over-drive switch activation, no peripheral clocks should be enabled.   
 467:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          The peripheral clocks must be enabled once the Over-drive mode is activated.
 468:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            
 469:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive mode.
 470:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 471:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 472:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 473:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_OverDriveCmd(FunctionalState NewState)
 474:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 263              		.loc 1 474 1 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 475:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 476:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 268              		.loc 1 476 3 view .LVU49
 477:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 478:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
 479:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 269              		.loc 1 479 3 view .LVU50
 270              		.loc 1 479 33 is_stmt 0 view .LVU51
 271 0000 014B     		ldr	r3, .L22
 272 0002 1864     		str	r0, [r3, #64]
 480:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 273              		.loc 1 480 1 view .LVU52
 274 0004 7047     		bx	lr
 275              	.L23:
 276 0006 00BF     		.align	2
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 14


 277              	.L22:
 278 0008 00000E42 		.word	1108213760
 279              		.cfi_endproc
 280              	.LFE130:
 282              		.section	.text.PWR_OverDriveSWCmd,"ax",%progbits
 283              		.align	1
 284              		.global	PWR_OverDriveSWCmd
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	PWR_OverDriveSWCmd:
 290              	.LVL15:
 291              	.LFB131:
 481:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 482:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 483:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive switching.
 484:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 485:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices. 
 486:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *       
 487:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive switching mode.
 488:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 490:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 491:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_OverDriveSWCmd(FunctionalState NewState)
 492:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 292              		.loc 1 492 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 493:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 494:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 297              		.loc 1 494 3 view .LVU54
 495:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 496:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
 497:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 298              		.loc 1 497 3 view .LVU55
 299              		.loc 1 497 35 is_stmt 0 view .LVU56
 300 0000 014B     		ldr	r3, .L25
 301 0002 5864     		str	r0, [r3, #68]
 498:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 302              		.loc 1 498 1 view .LVU57
 303 0004 7047     		bx	lr
 304              	.L26:
 305 0006 00BF     		.align	2
 306              	.L25:
 307 0008 00000E42 		.word	1108213760
 308              		.cfi_endproc
 309              	.LFE131:
 311              		.section	.text.PWR_UnderDriveCmd,"ax",%progbits
 312              		.align	1
 313              		.global	PWR_UnderDriveCmd
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 318              	PWR_UnderDriveCmd:
 319              	.LVL16:
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 15


 320              	.LFB132:
 499:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 500:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 501:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   Enables or disables the Under-Drive mode.
 502:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 503:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 504:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note    This mode is enabled only with STOP low power mode.
 505:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          In this mode, the 1.2V domain is preserved in reduced leakage mode. This 
 506:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          mode is only available when the main regulator or the low power regulator 
 507:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          is in low voltage mode
 508:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *        
 509:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the Under-drive mode was enabled, it is automatically disabled after 
 510:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         exiting Stop mode. 
 511:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         When the voltage regulator operates in Under-drive mode, an additional  
 512:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is induced when waking up from Stop mode.
 513:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                    
 514:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Under Drive mode.
 515:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 517:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 518:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_UnderDriveCmd(FunctionalState NewState)
 519:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 321              		.loc 1 519 1 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 520:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 521:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 326              		.loc 1 521 3 view .LVU59
 522:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 523:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 327              		.loc 1 523 3 view .LVU60
 328              		.loc 1 523 6 is_stmt 0 view .LVU61
 329 0000 28B1     		cbz	r0, .L28
 524:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 525:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Set the UDEN[1:0] bits to enable the Under Drive mode */
 526:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= (uint32_t)PWR_CR_UDEN;
 330              		.loc 1 526 5 is_stmt 1 view .LVU62
 331              		.loc 1 526 8 is_stmt 0 view .LVU63
 332 0002 064A     		ldr	r2, .L30
 333 0004 1368     		ldr	r3, [r2]
 334              		.loc 1 526 13 view .LVU64
 335 0006 43F44023 		orr	r3, r3, #786432
 336 000a 1360     		str	r3, [r2]
 337 000c 7047     		bx	lr
 338              	.L28:
 527:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 529:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
 531:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 339              		.loc 1 531 5 is_stmt 1 view .LVU65
 340              		.loc 1 531 8 is_stmt 0 view .LVU66
 341 000e 034A     		ldr	r2, .L30
 342 0010 1368     		ldr	r3, [r2]
 343              		.loc 1 531 13 view .LVU67
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 16


 344 0012 23F44023 		bic	r3, r3, #786432
 345 0016 1360     		str	r3, [r2]
 532:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 346              		.loc 1 533 1 view .LVU68
 347 0018 7047     		bx	lr
 348              	.L31:
 349 001a 00BF     		.align	2
 350              	.L30:
 351 001c 00700040 		.word	1073770496
 352              		.cfi_endproc
 353              	.LFE132:
 355              		.section	.text.PWR_MainRegulatorUnderDriveCmd,"ax",%progbits
 356              		.align	1
 357              		.global	PWR_MainRegulatorUnderDriveCmd
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 362              	PWR_MainRegulatorUnderDriveCmd:
 363              	.LVL17:
 364              	.LFB133:
 534:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 535:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
 536:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 537:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator under drive mode.
 538:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 539:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 540:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 541:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Under Drive mode.
 542:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 543:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 544:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 545:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorUnderDriveCmd(FunctionalState NewState)
 546:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** { 
 365              		.loc 1 546 1 is_stmt 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 547:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 548:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 370              		.loc 1 548 3 view .LVU70
 549:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 550:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 371              		.loc 1 550 3 view .LVU71
 372              		.loc 1 550 6 is_stmt 0 view .LVU72
 373 0000 18B1     		cbz	r0, .L33
 551:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 552:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)ENABLE;
 374              		.loc 1 552 5 is_stmt 1 view .LVU73
 375              		.loc 1 552 36 is_stmt 0 view .LVU74
 376 0002 044B     		ldr	r3, .L35
 377 0004 0122     		movs	r2, #1
 378 0006 DA62     		str	r2, [r3, #44]
 379 0008 7047     		bx	lr
 380              	.L33:
 553:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 17


 554:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 555:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 556:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)DISABLE;
 381              		.loc 1 556 5 is_stmt 1 view .LVU75
 382              		.loc 1 556 36 is_stmt 0 view .LVU76
 383 000a 024B     		ldr	r3, .L35
 384 000c 0022     		movs	r2, #0
 385 000e DA62     		str	r2, [r3, #44]
 557:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 558:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 386              		.loc 1 558 1 view .LVU77
 387 0010 7047     		bx	lr
 388              	.L36:
 389 0012 00BF     		.align	2
 390              	.L35:
 391 0014 00000E42 		.word	1108213760
 392              		.cfi_endproc
 393              	.LFE133:
 395              		.section	.text.PWR_LowRegulatorUnderDriveCmd,"ax",%progbits
 396              		.align	1
 397              		.global	PWR_LowRegulatorUnderDriveCmd
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 402              	PWR_LowRegulatorUnderDriveCmd:
 403              	.LVL18:
 404              	.LFB134:
 559:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 560:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 561:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator under drive mode.
 562:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 563:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 564:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 565:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Under Drive mode.
 566:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 567:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 568:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 569:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorUnderDriveCmd(FunctionalState NewState)
 570:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 405              		.loc 1 570 1 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 571:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 572:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 410              		.loc 1 572 3 view .LVU79
 573:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 574:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 411              		.loc 1 574 3 view .LVU80
 412              		.loc 1 574 6 is_stmt 0 view .LVU81
 413 0000 18B1     		cbz	r0, .L38
 575:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 576:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)ENABLE;
 414              		.loc 1 576 5 is_stmt 1 view .LVU82
 415              		.loc 1 576 36 is_stmt 0 view .LVU83
 416 0002 044B     		ldr	r3, .L40
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 18


 417 0004 0122     		movs	r2, #1
 418 0006 9A62     		str	r2, [r3, #40]
 419 0008 7047     		bx	lr
 420              	.L38:
 577:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 578:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 579:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 580:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)DISABLE;
 421              		.loc 1 580 5 is_stmt 1 view .LVU84
 422              		.loc 1 580 36 is_stmt 0 view .LVU85
 423 000a 024B     		ldr	r3, .L40
 424 000c 0022     		movs	r2, #0
 425 000e 9A62     		str	r2, [r3, #40]
 581:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 582:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 426              		.loc 1 582 1 view .LVU86
 427 0010 7047     		bx	lr
 428              	.L41:
 429 0012 00BF     		.align	2
 430              	.L40:
 431 0014 00000E42 		.word	1108213760
 432              		.cfi_endproc
 433              	.LFE134:
 435              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 436              		.align	1
 437              		.global	PWR_FlashPowerDownCmd
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 442              	PWR_FlashPowerDownCmd:
 443              	.LVL19:
 444              	.LFB135:
 583:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
 584:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 585:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
 586:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 587:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator low voltage mode.
 588:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 589:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 590:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 591:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Low Voltage mode.
 592:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 593:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 594:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 595:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorLowVoltageCmd(FunctionalState NewState)
 596:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** { 
 597:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 598:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 599:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 600:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 601:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 602:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
 603:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 604:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 605:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 606:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
 607:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 19


 608:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 609:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 610:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 611:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator low voltage mode.
 612:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 613:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 614:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 615:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Low Voltage mode.
 616:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 617:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 618:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 619:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorLowVoltageCmd(FunctionalState NewState)
 620:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 621:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 622:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 623:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 624:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 625:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 626:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
 627:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 628:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 629:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 630:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
 631:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 632:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 633:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
 634:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 635:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 636:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 637:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 638:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 639:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 640:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   FLASH Power Down configuration functions 
 641:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 642:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 643:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 644:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              ##### FLASH Power Down configuration functions #####
 645:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 646:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 647:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 648:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           PWR_FlashPowerDownCmd() function, the Flash memory also enters power 
 649:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           down mode when the device enters Stop mode. When the Flash memory 
 650:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           is in power down mode, an additional startup delay is incurred when 
 651:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           waking up from Stop mode.
 652:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 653:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 654:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 655:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 656:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 657:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 658:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 659:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 660:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 661:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 662:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 663:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 445              		.loc 1 663 1 is_stmt 1 view -0
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 20


 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 664:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 665:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 450              		.loc 1 665 3 view .LVU88
 666:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 667:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 451              		.loc 1 667 3 view .LVU89
 452              		.loc 1 667 33 is_stmt 0 view .LVU90
 453 0000 014B     		ldr	r3, .L43
 454 0002 5862     		str	r0, [r3, #36]
 668:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 455              		.loc 1 668 1 view .LVU91
 456 0004 7047     		bx	lr
 457              	.L44:
 458 0006 00BF     		.align	2
 459              	.L43:
 460 0008 00000E42 		.word	1108213760
 461              		.cfi_endproc
 462              	.LFE135:
 464              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 465              		.align	1
 466              		.global	PWR_EnterSTOPMode
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 471              	PWR_EnterSTOPMode:
 472              	.LVL20:
 473              	.LFB136:
 669:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 670:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 671:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 672:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 673:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 674:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 675:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Low Power modes configuration functions 
 676:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 677:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 678:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 679:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               ##### Low Power modes configuration functions #####
 680:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 681:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 682:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The devices feature 3 low-power modes:
 683:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 684:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 685:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           in low power mode
 686:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 687:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 688:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Sleep mode ***
 689:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==================
 690:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 691:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 692:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Sleep mode is entered by using the __WFI() or __WFE() functions.
 693:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 694:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 21


 695:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 696:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 697:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Stop mode ***
 698:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =================
 699:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 700:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 701:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 702:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       are preserved.
 703:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 704:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 705:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       entering the Stop mode. It can be switched on again by software after exiting 
 706:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       the Stop mode using the PWR_FlashPowerDownCmd() function. 
 707:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 708:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 709:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_MainRegulator_ON) 
 710:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              function with:
 711:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Main regulator ON.
 712:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Low Power regulator ON.
 713:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 714:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 715:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 716:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Standby mode ***
 717:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ====================
 718:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 719:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 720:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 721:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 722:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 723:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 724:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       circuitry.
 725:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 726:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The voltage regulator is OFF.
 727:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 728:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 729:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 730:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 731:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 732:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 733:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 734:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 735:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =============================================
 736:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 737:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 738:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 739:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 740:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 741:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Stop mode
 742:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        
 743:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 744:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 745:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 746:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 747:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 748:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 749:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 750:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              is necessary to:
 751:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 22


 752:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 753:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 754:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 function
 755:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 756:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 757:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 functions.
 758:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 759:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 760:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  or Event modes) using the EXTI_Init() function.
 761:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 762:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig
 763:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 764:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 765:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Standby mode
 766:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 767:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 768:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 769:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 770:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 771:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 772:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              is necessary to:
 773:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 774:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 function
 775:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 776:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 777:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 functions.
 778:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 779:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 780:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(
 781:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 782:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 783:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 784:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 785:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 786:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 787:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 788:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 789:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 790:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 791:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 792:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 793:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 794:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 795:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 796:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 797:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 798:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 799:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 800:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_ON: STOP mode with regulator ON
 801:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_ON: STOP mode with low power regulator ON
 802:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 803:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 804:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 805:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 806:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 807:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 808:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 23


 809:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 474              		.loc 1 809 1 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 810:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 479              		.loc 1 810 3 view .LVU93
 811:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 812:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 813:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 480              		.loc 1 813 3 view .LVU94
 814:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 481              		.loc 1 814 3 view .LVU95
 815:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 816:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 817:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 482              		.loc 1 817 3 view .LVU96
 483              		.loc 1 817 10 is_stmt 0 view .LVU97
 484 0000 0B4A     		ldr	r2, .L49
 485 0002 1368     		ldr	r3, [r2]
 486              	.LVL21:
 818:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 819:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 487              		.loc 1 819 3 is_stmt 1 view .LVU98
 488              		.loc 1 819 10 is_stmt 0 view .LVU99
 489 0004 23F44063 		bic	r3, r3, #3072
 490              	.LVL22:
 491              		.loc 1 819 10 view .LVU100
 492 0008 23F00303 		bic	r3, r3, #3
 493              	.LVL23:
 820:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 821:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
 822:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 494              		.loc 1 822 3 is_stmt 1 view .LVU101
 495              		.loc 1 822 10 is_stmt 0 view .LVU102
 496 000c 0343     		orrs	r3, r3, r0
 497              	.LVL24:
 823:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 824:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 825:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 498              		.loc 1 825 3 is_stmt 1 view .LVU103
 499              		.loc 1 825 11 is_stmt 0 view .LVU104
 500 000e 1360     		str	r3, [r2]
 826:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 827:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 828:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 501              		.loc 1 828 3 is_stmt 1 view .LVU105
 502              		.loc 1 828 6 is_stmt 0 view .LVU106
 503 0010 084A     		ldr	r2, .L49+4
 504 0012 1369     		ldr	r3, [r2, #16]
 505              	.LVL25:
 506              		.loc 1 828 12 view .LVU107
 507 0014 43F00403 		orr	r3, r3, #4
 508 0018 1361     		str	r3, [r2, #16]
 509              	.LVL26:
 829:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 24


 830:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 831:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 510              		.loc 1 831 3 is_stmt 1 view .LVU108
 511              		.loc 1 831 5 is_stmt 0 view .LVU109
 512 001a 0129     		cmp	r1, #1
 513 001c 06D0     		beq	.L48
 832:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 833:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 834:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 835:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 836:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 837:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 838:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 839:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 514              		.loc 1 839 5 is_stmt 1 view .LVU110
 515              	.LBB12:
 516              	.LBI12:
 517              		.file 2 "libraries/CMSIS/include/core_cmInstr.h"
   1:libraries/CMSIS/include/core_cmInstr.h **** /**************************************************************************//**
   2:libraries/CMSIS/include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libraries/CMSIS/include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libraries/CMSIS/include/core_cmInstr.h ****  * @version  V4.10
   5:libraries/CMSIS/include/core_cmInstr.h ****  * @date     18. March 2015
   6:libraries/CMSIS/include/core_cmInstr.h ****  *
   7:libraries/CMSIS/include/core_cmInstr.h ****  * @note
   8:libraries/CMSIS/include/core_cmInstr.h ****  *
   9:libraries/CMSIS/include/core_cmInstr.h ****  ******************************************************************************/
  10:libraries/CMSIS/include/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:libraries/CMSIS/include/core_cmInstr.h **** 
  12:libraries/CMSIS/include/core_cmInstr.h ****    All rights reserved.
  13:libraries/CMSIS/include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:libraries/CMSIS/include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:libraries/CMSIS/include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:libraries/CMSIS/include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:libraries/CMSIS/include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:libraries/CMSIS/include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:libraries/CMSIS/include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:libraries/CMSIS/include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:libraries/CMSIS/include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:libraries/CMSIS/include/core_cmInstr.h ****      specific prior written permission.
  23:libraries/CMSIS/include/core_cmInstr.h ****    *
  24:libraries/CMSIS/include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:libraries/CMSIS/include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:libraries/CMSIS/include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:libraries/CMSIS/include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:libraries/CMSIS/include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:libraries/CMSIS/include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:libraries/CMSIS/include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:libraries/CMSIS/include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:libraries/CMSIS/include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:libraries/CMSIS/include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:libraries/CMSIS/include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:libraries/CMSIS/include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:libraries/CMSIS/include/core_cmInstr.h **** 
  37:libraries/CMSIS/include/core_cmInstr.h **** 
  38:libraries/CMSIS/include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:libraries/CMSIS/include/core_cmInstr.h **** #define __CORE_CMINSTR_H
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 25


  40:libraries/CMSIS/include/core_cmInstr.h **** 
  41:libraries/CMSIS/include/core_cmInstr.h **** 
  42:libraries/CMSIS/include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:libraries/CMSIS/include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:libraries/CMSIS/include/core_cmInstr.h ****   Access to dedicated instructions
  45:libraries/CMSIS/include/core_cmInstr.h ****   @{
  46:libraries/CMSIS/include/core_cmInstr.h **** */
  47:libraries/CMSIS/include/core_cmInstr.h **** 
  48:libraries/CMSIS/include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:libraries/CMSIS/include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:libraries/CMSIS/include/core_cmInstr.h **** 
  51:libraries/CMSIS/include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:libraries/CMSIS/include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:libraries/CMSIS/include/core_cmInstr.h **** #endif
  54:libraries/CMSIS/include/core_cmInstr.h **** 
  55:libraries/CMSIS/include/core_cmInstr.h **** 
  56:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
  57:libraries/CMSIS/include/core_cmInstr.h **** 
  58:libraries/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:libraries/CMSIS/include/core_cmInstr.h ****  */
  60:libraries/CMSIS/include/core_cmInstr.h **** #define __NOP                             __nop
  61:libraries/CMSIS/include/core_cmInstr.h **** 
  62:libraries/CMSIS/include/core_cmInstr.h **** 
  63:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:libraries/CMSIS/include/core_cmInstr.h **** 
  65:libraries/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:libraries/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
  67:libraries/CMSIS/include/core_cmInstr.h ****  */
  68:libraries/CMSIS/include/core_cmInstr.h **** #define __WFI                             __wfi
  69:libraries/CMSIS/include/core_cmInstr.h **** 
  70:libraries/CMSIS/include/core_cmInstr.h **** 
  71:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
  72:libraries/CMSIS/include/core_cmInstr.h **** 
  73:libraries/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:libraries/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:libraries/CMSIS/include/core_cmInstr.h ****  */
  76:libraries/CMSIS/include/core_cmInstr.h **** #define __WFE                             __wfe
  77:libraries/CMSIS/include/core_cmInstr.h **** 
  78:libraries/CMSIS/include/core_cmInstr.h **** 
  79:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Send Event
  80:libraries/CMSIS/include/core_cmInstr.h **** 
  81:libraries/CMSIS/include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:libraries/CMSIS/include/core_cmInstr.h ****  */
  83:libraries/CMSIS/include/core_cmInstr.h **** #define __SEV                             __sev
  84:libraries/CMSIS/include/core_cmInstr.h **** 
  85:libraries/CMSIS/include/core_cmInstr.h **** 
  86:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:libraries/CMSIS/include/core_cmInstr.h **** 
  88:libraries/CMSIS/include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:libraries/CMSIS/include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:libraries/CMSIS/include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:libraries/CMSIS/include/core_cmInstr.h ****  */
  92:libraries/CMSIS/include/core_cmInstr.h **** #define __ISB() do {\
  93:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
  94:libraries/CMSIS/include/core_cmInstr.h ****                    __isb(0xF);\
  95:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
  96:libraries/CMSIS/include/core_cmInstr.h ****                 } while (0)
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 26


  97:libraries/CMSIS/include/core_cmInstr.h **** 
  98:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:libraries/CMSIS/include/core_cmInstr.h **** 
 100:libraries/CMSIS/include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:libraries/CMSIS/include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:libraries/CMSIS/include/core_cmInstr.h ****  */
 103:libraries/CMSIS/include/core_cmInstr.h **** #define __DSB() do {\
 104:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
 105:libraries/CMSIS/include/core_cmInstr.h ****                    __dsb(0xF);\
 106:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
 107:libraries/CMSIS/include/core_cmInstr.h ****                 } while (0)
 108:libraries/CMSIS/include/core_cmInstr.h **** 
 109:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:libraries/CMSIS/include/core_cmInstr.h **** 
 111:libraries/CMSIS/include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:libraries/CMSIS/include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:libraries/CMSIS/include/core_cmInstr.h ****  */
 114:libraries/CMSIS/include/core_cmInstr.h **** #define __DMB() do {\
 115:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
 116:libraries/CMSIS/include/core_cmInstr.h ****                    __dmb(0xF);\
 117:libraries/CMSIS/include/core_cmInstr.h ****                    __schedule_barrier();\
 118:libraries/CMSIS/include/core_cmInstr.h ****                 } while (0)
 119:libraries/CMSIS/include/core_cmInstr.h **** 
 120:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:libraries/CMSIS/include/core_cmInstr.h **** 
 122:libraries/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:libraries/CMSIS/include/core_cmInstr.h **** 
 124:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:libraries/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 126:libraries/CMSIS/include/core_cmInstr.h ****  */
 127:libraries/CMSIS/include/core_cmInstr.h **** #define __REV                             __rev
 128:libraries/CMSIS/include/core_cmInstr.h **** 
 129:libraries/CMSIS/include/core_cmInstr.h **** 
 130:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:libraries/CMSIS/include/core_cmInstr.h **** 
 132:libraries/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:libraries/CMSIS/include/core_cmInstr.h **** 
 134:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:libraries/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 136:libraries/CMSIS/include/core_cmInstr.h ****  */
 137:libraries/CMSIS/include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:libraries/CMSIS/include/core_cmInstr.h **** {
 140:libraries/CMSIS/include/core_cmInstr.h ****   rev16 r0, r0
 141:libraries/CMSIS/include/core_cmInstr.h ****   bx lr
 142:libraries/CMSIS/include/core_cmInstr.h **** }
 143:libraries/CMSIS/include/core_cmInstr.h **** #endif
 144:libraries/CMSIS/include/core_cmInstr.h **** 
 145:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:libraries/CMSIS/include/core_cmInstr.h **** 
 147:libraries/CMSIS/include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:libraries/CMSIS/include/core_cmInstr.h **** 
 149:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:libraries/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 151:libraries/CMSIS/include/core_cmInstr.h ****  */
 152:libraries/CMSIS/include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 27


 154:libraries/CMSIS/include/core_cmInstr.h **** {
 155:libraries/CMSIS/include/core_cmInstr.h ****   revsh r0, r0
 156:libraries/CMSIS/include/core_cmInstr.h ****   bx lr
 157:libraries/CMSIS/include/core_cmInstr.h **** }
 158:libraries/CMSIS/include/core_cmInstr.h **** #endif
 159:libraries/CMSIS/include/core_cmInstr.h **** 
 160:libraries/CMSIS/include/core_cmInstr.h **** 
 161:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:libraries/CMSIS/include/core_cmInstr.h **** 
 163:libraries/CMSIS/include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:libraries/CMSIS/include/core_cmInstr.h **** 
 165:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:libraries/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 168:libraries/CMSIS/include/core_cmInstr.h ****  */
 169:libraries/CMSIS/include/core_cmInstr.h **** #define __ROR                             __ror
 170:libraries/CMSIS/include/core_cmInstr.h **** 
 171:libraries/CMSIS/include/core_cmInstr.h **** 
 172:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Breakpoint
 173:libraries/CMSIS/include/core_cmInstr.h **** 
 174:libraries/CMSIS/include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:libraries/CMSIS/include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:libraries/CMSIS/include/core_cmInstr.h **** 
 177:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:libraries/CMSIS/include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:libraries/CMSIS/include/core_cmInstr.h ****  */
 180:libraries/CMSIS/include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:libraries/CMSIS/include/core_cmInstr.h **** 
 182:libraries/CMSIS/include/core_cmInstr.h **** 
 183:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:libraries/CMSIS/include/core_cmInstr.h **** 
 185:libraries/CMSIS/include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:libraries/CMSIS/include/core_cmInstr.h **** 
 187:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:libraries/CMSIS/include/core_cmInstr.h ****     \return               Reversed value
 189:libraries/CMSIS/include/core_cmInstr.h ****  */
 190:libraries/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:libraries/CMSIS/include/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:libraries/CMSIS/include/core_cmInstr.h **** #else
 193:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:libraries/CMSIS/include/core_cmInstr.h **** {
 195:libraries/CMSIS/include/core_cmInstr.h ****   uint32_t result;
 196:libraries/CMSIS/include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:libraries/CMSIS/include/core_cmInstr.h **** 
 198:libraries/CMSIS/include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:libraries/CMSIS/include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:libraries/CMSIS/include/core_cmInstr.h ****   {
 201:libraries/CMSIS/include/core_cmInstr.h ****     result <<= 1;
 202:libraries/CMSIS/include/core_cmInstr.h ****     result |= value & 1;
 203:libraries/CMSIS/include/core_cmInstr.h ****     s--;
 204:libraries/CMSIS/include/core_cmInstr.h ****   }
 205:libraries/CMSIS/include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:libraries/CMSIS/include/core_cmInstr.h ****   return(result);
 207:libraries/CMSIS/include/core_cmInstr.h **** }
 208:libraries/CMSIS/include/core_cmInstr.h **** #endif
 209:libraries/CMSIS/include/core_cmInstr.h **** 
 210:libraries/CMSIS/include/core_cmInstr.h **** 
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 28


 211:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Count leading zeros
 212:libraries/CMSIS/include/core_cmInstr.h **** 
 213:libraries/CMSIS/include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:libraries/CMSIS/include/core_cmInstr.h **** 
 215:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:libraries/CMSIS/include/core_cmInstr.h ****     \return             number of leading zeros in value
 217:libraries/CMSIS/include/core_cmInstr.h ****  */
 218:libraries/CMSIS/include/core_cmInstr.h **** #define __CLZ                             __clz
 219:libraries/CMSIS/include/core_cmInstr.h **** 
 220:libraries/CMSIS/include/core_cmInstr.h **** 
 221:libraries/CMSIS/include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:libraries/CMSIS/include/core_cmInstr.h **** 
 223:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:libraries/CMSIS/include/core_cmInstr.h **** 
 225:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:libraries/CMSIS/include/core_cmInstr.h **** 
 227:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:libraries/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:libraries/CMSIS/include/core_cmInstr.h ****  */
 230:libraries/CMSIS/include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:libraries/CMSIS/include/core_cmInstr.h **** 
 232:libraries/CMSIS/include/core_cmInstr.h **** 
 233:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:libraries/CMSIS/include/core_cmInstr.h **** 
 235:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:libraries/CMSIS/include/core_cmInstr.h **** 
 237:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:libraries/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:libraries/CMSIS/include/core_cmInstr.h ****  */
 240:libraries/CMSIS/include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:libraries/CMSIS/include/core_cmInstr.h **** 
 242:libraries/CMSIS/include/core_cmInstr.h **** 
 243:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:libraries/CMSIS/include/core_cmInstr.h **** 
 245:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:libraries/CMSIS/include/core_cmInstr.h **** 
 247:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:libraries/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:libraries/CMSIS/include/core_cmInstr.h ****  */
 250:libraries/CMSIS/include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:libraries/CMSIS/include/core_cmInstr.h **** 
 252:libraries/CMSIS/include/core_cmInstr.h **** 
 253:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:libraries/CMSIS/include/core_cmInstr.h **** 
 255:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:libraries/CMSIS/include/core_cmInstr.h **** 
 257:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 258:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:libraries/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 260:libraries/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 261:libraries/CMSIS/include/core_cmInstr.h ****  */
 262:libraries/CMSIS/include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:libraries/CMSIS/include/core_cmInstr.h **** 
 264:libraries/CMSIS/include/core_cmInstr.h **** 
 265:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:libraries/CMSIS/include/core_cmInstr.h **** 
 267:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 29


 268:libraries/CMSIS/include/core_cmInstr.h **** 
 269:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 270:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:libraries/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 272:libraries/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 273:libraries/CMSIS/include/core_cmInstr.h ****  */
 274:libraries/CMSIS/include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:libraries/CMSIS/include/core_cmInstr.h **** 
 276:libraries/CMSIS/include/core_cmInstr.h **** 
 277:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:libraries/CMSIS/include/core_cmInstr.h **** 
 279:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:libraries/CMSIS/include/core_cmInstr.h **** 
 281:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 282:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:libraries/CMSIS/include/core_cmInstr.h ****     \return          0  Function succeeded
 284:libraries/CMSIS/include/core_cmInstr.h ****     \return          1  Function failed
 285:libraries/CMSIS/include/core_cmInstr.h ****  */
 286:libraries/CMSIS/include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:libraries/CMSIS/include/core_cmInstr.h **** 
 288:libraries/CMSIS/include/core_cmInstr.h **** 
 289:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:libraries/CMSIS/include/core_cmInstr.h **** 
 291:libraries/CMSIS/include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:libraries/CMSIS/include/core_cmInstr.h **** 
 293:libraries/CMSIS/include/core_cmInstr.h ****  */
 294:libraries/CMSIS/include/core_cmInstr.h **** #define __CLREX                           __clrex
 295:libraries/CMSIS/include/core_cmInstr.h **** 
 296:libraries/CMSIS/include/core_cmInstr.h **** 
 297:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Signed Saturate
 298:libraries/CMSIS/include/core_cmInstr.h **** 
 299:libraries/CMSIS/include/core_cmInstr.h ****     This function saturates a signed value.
 300:libraries/CMSIS/include/core_cmInstr.h **** 
 301:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:libraries/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 304:libraries/CMSIS/include/core_cmInstr.h ****  */
 305:libraries/CMSIS/include/core_cmInstr.h **** #define __SSAT                            __ssat
 306:libraries/CMSIS/include/core_cmInstr.h **** 
 307:libraries/CMSIS/include/core_cmInstr.h **** 
 308:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:libraries/CMSIS/include/core_cmInstr.h **** 
 310:libraries/CMSIS/include/core_cmInstr.h ****     This function saturates an unsigned value.
 311:libraries/CMSIS/include/core_cmInstr.h **** 
 312:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:libraries/CMSIS/include/core_cmInstr.h ****     \return             Saturated value
 315:libraries/CMSIS/include/core_cmInstr.h ****  */
 316:libraries/CMSIS/include/core_cmInstr.h **** #define __USAT                            __usat
 317:libraries/CMSIS/include/core_cmInstr.h **** 
 318:libraries/CMSIS/include/core_cmInstr.h **** 
 319:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:libraries/CMSIS/include/core_cmInstr.h **** 
 321:libraries/CMSIS/include/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:libraries/CMSIS/include/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:libraries/CMSIS/include/core_cmInstr.h **** 
 324:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    value  Value to rotate
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 30


 325:libraries/CMSIS/include/core_cmInstr.h ****     \return               Rotated value
 326:libraries/CMSIS/include/core_cmInstr.h ****  */
 327:libraries/CMSIS/include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:libraries/CMSIS/include/core_cmInstr.h **** {
 330:libraries/CMSIS/include/core_cmInstr.h ****   rrx r0, r0
 331:libraries/CMSIS/include/core_cmInstr.h ****   bx lr
 332:libraries/CMSIS/include/core_cmInstr.h **** }
 333:libraries/CMSIS/include/core_cmInstr.h **** #endif
 334:libraries/CMSIS/include/core_cmInstr.h **** 
 335:libraries/CMSIS/include/core_cmInstr.h **** 
 336:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:libraries/CMSIS/include/core_cmInstr.h **** 
 338:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:libraries/CMSIS/include/core_cmInstr.h **** 
 340:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:libraries/CMSIS/include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:libraries/CMSIS/include/core_cmInstr.h ****  */
 343:libraries/CMSIS/include/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:libraries/CMSIS/include/core_cmInstr.h **** 
 345:libraries/CMSIS/include/core_cmInstr.h **** 
 346:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:libraries/CMSIS/include/core_cmInstr.h **** 
 348:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:libraries/CMSIS/include/core_cmInstr.h **** 
 350:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:libraries/CMSIS/include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:libraries/CMSIS/include/core_cmInstr.h ****  */
 353:libraries/CMSIS/include/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:libraries/CMSIS/include/core_cmInstr.h **** 
 355:libraries/CMSIS/include/core_cmInstr.h **** 
 356:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:libraries/CMSIS/include/core_cmInstr.h **** 
 358:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:libraries/CMSIS/include/core_cmInstr.h **** 
 360:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:libraries/CMSIS/include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:libraries/CMSIS/include/core_cmInstr.h ****  */
 363:libraries/CMSIS/include/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:libraries/CMSIS/include/core_cmInstr.h **** 
 365:libraries/CMSIS/include/core_cmInstr.h **** 
 366:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:libraries/CMSIS/include/core_cmInstr.h **** 
 368:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:libraries/CMSIS/include/core_cmInstr.h **** 
 370:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 371:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:libraries/CMSIS/include/core_cmInstr.h ****  */
 373:libraries/CMSIS/include/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:libraries/CMSIS/include/core_cmInstr.h **** 
 375:libraries/CMSIS/include/core_cmInstr.h **** 
 376:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:libraries/CMSIS/include/core_cmInstr.h **** 
 378:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:libraries/CMSIS/include/core_cmInstr.h **** 
 380:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 381:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 31


 382:libraries/CMSIS/include/core_cmInstr.h ****  */
 383:libraries/CMSIS/include/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:libraries/CMSIS/include/core_cmInstr.h **** 
 385:libraries/CMSIS/include/core_cmInstr.h **** 
 386:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:libraries/CMSIS/include/core_cmInstr.h **** 
 388:libraries/CMSIS/include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:libraries/CMSIS/include/core_cmInstr.h **** 
 390:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]  value  Value to store
 391:libraries/CMSIS/include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:libraries/CMSIS/include/core_cmInstr.h ****  */
 393:libraries/CMSIS/include/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:libraries/CMSIS/include/core_cmInstr.h **** 
 395:libraries/CMSIS/include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:libraries/CMSIS/include/core_cmInstr.h **** 
 397:libraries/CMSIS/include/core_cmInstr.h **** 
 398:libraries/CMSIS/include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:libraries/CMSIS/include/core_cmInstr.h **** /* GNU gcc specific functions */
 400:libraries/CMSIS/include/core_cmInstr.h **** 
 401:libraries/CMSIS/include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:libraries/CMSIS/include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:libraries/CMSIS/include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:libraries/CMSIS/include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:libraries/CMSIS/include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:libraries/CMSIS/include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:libraries/CMSIS/include/core_cmInstr.h **** #else
 408:libraries/CMSIS/include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:libraries/CMSIS/include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:libraries/CMSIS/include/core_cmInstr.h **** #endif
 411:libraries/CMSIS/include/core_cmInstr.h **** 
 412:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  No Operation
 413:libraries/CMSIS/include/core_cmInstr.h **** 
 414:libraries/CMSIS/include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:libraries/CMSIS/include/core_cmInstr.h ****  */
 416:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:libraries/CMSIS/include/core_cmInstr.h **** {
 418:libraries/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("nop");
 419:libraries/CMSIS/include/core_cmInstr.h **** }
 420:libraries/CMSIS/include/core_cmInstr.h **** 
 421:libraries/CMSIS/include/core_cmInstr.h **** 
 422:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:libraries/CMSIS/include/core_cmInstr.h **** 
 424:libraries/CMSIS/include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:libraries/CMSIS/include/core_cmInstr.h ****     until one of a number of events occurs.
 426:libraries/CMSIS/include/core_cmInstr.h ****  */
 427:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:libraries/CMSIS/include/core_cmInstr.h **** {
 429:libraries/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:libraries/CMSIS/include/core_cmInstr.h **** }
 431:libraries/CMSIS/include/core_cmInstr.h **** 
 432:libraries/CMSIS/include/core_cmInstr.h **** 
 433:libraries/CMSIS/include/core_cmInstr.h **** /** \brief  Wait For Event
 434:libraries/CMSIS/include/core_cmInstr.h **** 
 435:libraries/CMSIS/include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:libraries/CMSIS/include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:libraries/CMSIS/include/core_cmInstr.h ****  */
 438:libraries/CMSIS/include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 32


 518              		.loc 2 438 53 view .LVU111
 519              	.LBB13:
 439:libraries/CMSIS/include/core_cmInstr.h **** {
 440:libraries/CMSIS/include/core_cmInstr.h ****   __ASM volatile ("wfe");
 520              		.loc 2 440 3 view .LVU112
 521              		.syntax unified
 522              	@ 440 "libraries/CMSIS/include/core_cmInstr.h" 1
 523 001e 20BF     		wfe
 524              	@ 0 "" 2
 525              		.thumb
 526              		.syntax unified
 527              	.L47:
 528              	.LBE13:
 529              	.LBE12:
 840:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 841:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 842:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 530              		.loc 1 842 3 view .LVU113
 531              		.loc 1 842 6 is_stmt 0 view .LVU114
 532 0020 044A     		ldr	r2, .L49+4
 533 0022 1369     		ldr	r3, [r2, #16]
 534              		.loc 1 842 12 view .LVU115
 535 0024 23F00403 		bic	r3, r3, #4
 536 0028 1361     		str	r3, [r2, #16]
 843:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 537              		.loc 1 843 1 view .LVU116
 538 002a 7047     		bx	lr
 539              	.L48:
 834:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 540              		.loc 1 834 5 is_stmt 1 view .LVU117
 541              	.LBB14:
 542              	.LBI14:
 427:libraries/CMSIS/include/core_cmInstr.h **** {
 543              		.loc 2 427 53 view .LVU118
 544              	.LBB15:
 429:libraries/CMSIS/include/core_cmInstr.h **** }
 545              		.loc 2 429 3 view .LVU119
 546              		.syntax unified
 547              	@ 429 "libraries/CMSIS/include/core_cmInstr.h" 1
 548 002c 30BF     		wfi
 549              	@ 0 "" 2
 430:libraries/CMSIS/include/core_cmInstr.h **** 
 550              		.loc 2 430 1 is_stmt 0 view .LVU120
 551              		.thumb
 552              		.syntax unified
 553 002e F7E7     		b	.L47
 554              	.L50:
 555              		.align	2
 556              	.L49:
 557 0030 00700040 		.word	1073770496
 558 0034 00ED00E0 		.word	-536810240
 559              	.LBE15:
 560              	.LBE14:
 561              		.cfi_endproc
 562              	.LFE136:
 564              		.section	.text.PWR_EnterUnderDriveSTOPMode,"ax",%progbits
 565              		.align	1
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 33


 566              		.global	PWR_EnterUnderDriveSTOPMode
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 571              	PWR_EnterUnderDriveSTOPMode:
 572              	.LVL27:
 573              	.LFB137:
 844:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 845:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 846:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters in Under-Drive STOP mode.
 847:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  
 848:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This mode is only available for STM32F42xxx/STM3243xxx devices. 
 849:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 850:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note    This mode can be selected only when the Under-Drive is already active 
 851:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         
 852:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 853:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 854:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 855:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 856:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 857:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 858:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 859:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 860:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 861:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 862:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_UnderDrive_ON:  Main Regulator in under-drive mode 
 863:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 and Flash memory in power-down when the device is in Stop under-drive mode
 864:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_UnderDrive_ON:  Low Power Regulator in under-drive mode 
 865:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                and Flash memory in power-down when the device is in Stop under-drive mode
 866:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 867:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 868:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 869:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 870:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 871:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 872:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 873:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 574              		.loc 1 873 1 is_stmt 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 874:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 579              		.loc 1 874 3 view .LVU122
 875:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 876:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 877:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
 580              		.loc 1 877 3 view .LVU123
 878:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 581              		.loc 1 878 3 view .LVU124
 879:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 880:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 881:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 582              		.loc 1 881 3 view .LVU125
 583              		.loc 1 881 10 is_stmt 0 view .LVU126
 584 0000 0B4A     		ldr	r2, .L55
 585 0002 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 34


 586              	.LVL28:
 882:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 883:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 587              		.loc 1 883 3 is_stmt 1 view .LVU127
 588              		.loc 1 883 10 is_stmt 0 view .LVU128
 589 0004 23F44063 		bic	r3, r3, #3072
 590              	.LVL29:
 591              		.loc 1 883 10 view .LVU129
 592 0008 23F00303 		bic	r3, r3, #3
 593              	.LVL30:
 884:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 885:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
 886:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 594              		.loc 1 886 3 is_stmt 1 view .LVU130
 595              		.loc 1 886 10 is_stmt 0 view .LVU131
 596 000c 0343     		orrs	r3, r3, r0
 597              	.LVL31:
 887:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 888:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 889:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 598              		.loc 1 889 3 is_stmt 1 view .LVU132
 599              		.loc 1 889 11 is_stmt 0 view .LVU133
 600 000e 1360     		str	r3, [r2]
 890:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 891:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 892:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 601              		.loc 1 892 3 is_stmt 1 view .LVU134
 602              		.loc 1 892 6 is_stmt 0 view .LVU135
 603 0010 084A     		ldr	r2, .L55+4
 604 0012 1369     		ldr	r3, [r2, #16]
 605              	.LVL32:
 606              		.loc 1 892 12 view .LVU136
 607 0014 43F00403 		orr	r3, r3, #4
 608 0018 1361     		str	r3, [r2, #16]
 609              	.LVL33:
 893:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 894:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 895:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 610              		.loc 1 895 3 is_stmt 1 view .LVU137
 611              		.loc 1 895 5 is_stmt 0 view .LVU138
 612 001a 0129     		cmp	r1, #1
 613 001c 06D0     		beq	.L54
 896:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 897:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 898:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 899:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 900:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 901:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 902:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 903:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 614              		.loc 1 903 5 is_stmt 1 view .LVU139
 615              	.LBB16:
 616              	.LBI16:
 438:libraries/CMSIS/include/core_cmInstr.h **** {
 617              		.loc 2 438 53 view .LVU140
 618              	.LBB17:
 619              		.loc 2 440 3 view .LVU141
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 35


 620              		.syntax unified
 621              	@ 440 "libraries/CMSIS/include/core_cmInstr.h" 1
 622 001e 20BF     		wfe
 623              	@ 0 "" 2
 624              		.thumb
 625              		.syntax unified
 626              	.L53:
 627              	.LBE17:
 628              	.LBE16:
 904:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 905:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 906:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 629              		.loc 1 906 3 view .LVU142
 630              		.loc 1 906 6 is_stmt 0 view .LVU143
 631 0020 044A     		ldr	r2, .L55+4
 632 0022 1369     		ldr	r3, [r2, #16]
 633              		.loc 1 906 12 view .LVU144
 634 0024 23F00403 		bic	r3, r3, #4
 635 0028 1361     		str	r3, [r2, #16]
 907:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 636              		.loc 1 907 1 view .LVU145
 637 002a 7047     		bx	lr
 638              	.L54:
 898:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 639              		.loc 1 898 5 is_stmt 1 view .LVU146
 640              	.LBB18:
 641              	.LBI18:
 427:libraries/CMSIS/include/core_cmInstr.h **** {
 642              		.loc 2 427 53 view .LVU147
 643              	.LBB19:
 429:libraries/CMSIS/include/core_cmInstr.h **** }
 644              		.loc 2 429 3 view .LVU148
 645              		.syntax unified
 646              	@ 429 "libraries/CMSIS/include/core_cmInstr.h" 1
 647 002c 30BF     		wfi
 648              	@ 0 "" 2
 430:libraries/CMSIS/include/core_cmInstr.h **** 
 649              		.loc 2 430 1 is_stmt 0 view .LVU149
 650              		.thumb
 651              		.syntax unified
 652 002e F7E7     		b	.L53
 653              	.L56:
 654              		.align	2
 655              	.L55:
 656 0030 00700040 		.word	1073770496
 657 0034 00ED00E0 		.word	-536810240
 658              	.LBE19:
 659              	.LBE18:
 660              		.cfi_endproc
 661              	.LFE137:
 663              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 664              		.align	1
 665              		.global	PWR_EnterSTANDBYMode
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	PWR_EnterSTANDBYMode:
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 36


 671              	.LFB138:
 908:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 909:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 910:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 911:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 912:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 913:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 914:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 915:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 916:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.
 917:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   The Wakeup flag (WUF) need to be cleared at application level before to call this funct
 918:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 919:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 920:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 921:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 922:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 672              		.loc 1 922 1 is_stmt 1 view -0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 923:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 924:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 677              		.loc 1 924 3 view .LVU151
 678              		.loc 1 924 6 is_stmt 0 view .LVU152
 679 0000 054A     		ldr	r2, .L58
 680 0002 1368     		ldr	r3, [r2]
 681              		.loc 1 924 11 view .LVU153
 682 0004 43F00203 		orr	r3, r3, #2
 683 0008 1360     		str	r3, [r2]
 925:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 926:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 927:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 684              		.loc 1 927 3 is_stmt 1 view .LVU154
 685              		.loc 1 927 6 is_stmt 0 view .LVU155
 686 000a 044A     		ldr	r2, .L58+4
 687 000c 1369     		ldr	r3, [r2, #16]
 688              		.loc 1 927 12 view .LVU156
 689 000e 43F00403 		orr	r3, r3, #4
 690 0012 1361     		str	r3, [r2, #16]
 928:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 929:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* This option is used to ensure that store operations are completed */
 930:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 931:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 932:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 933:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 934:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 691              		.loc 1 934 3 is_stmt 1 view .LVU157
 692              	.LBB20:
 693              	.LBI20:
 427:libraries/CMSIS/include/core_cmInstr.h **** {
 694              		.loc 2 427 53 view .LVU158
 695              	.LBB21:
 429:libraries/CMSIS/include/core_cmInstr.h **** }
 696              		.loc 2 429 3 view .LVU159
 697              		.syntax unified
 698              	@ 429 "libraries/CMSIS/include/core_cmInstr.h" 1
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 37


 699 0014 30BF     		wfi
 700              	@ 0 "" 2
 701              		.thumb
 702              		.syntax unified
 703              	.LBE21:
 704              	.LBE20:
 935:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 705              		.loc 1 935 1 is_stmt 0 view .LVU160
 706 0016 7047     		bx	lr
 707              	.L59:
 708              		.align	2
 709              	.L58:
 710 0018 00700040 		.word	1073770496
 711 001c 00ED00E0 		.word	-536810240
 712              		.cfi_endproc
 713              	.LFE138:
 715              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 716              		.align	1
 717              		.global	PWR_GetFlagStatus
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 722              	PWR_GetFlagStatus:
 723              	.LVL34:
 724              	.LFB139:
 936:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 937:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 938:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 939:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 940:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 941:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 942:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Flags management functions 
 943:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 944:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 945:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 946:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     ##### Flags management functions #####
 947:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 948:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 949:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 950:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 951:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 952:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 953:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 954:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 955:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 956:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 957:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 958:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 959:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 960:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 961:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 962:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 963:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 964:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 965:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 966:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 967:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 38


 968:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 969:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 970:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 971:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 972:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready.
 973:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODRDY: This flag indicates that the Over-drive mode
 974:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 is ready (STM32F42xxx/43xxx devices) 
 975:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODSWRDY: This flag indicates that the Over-drive mode
 976:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 switching is ready (STM32F42xxx/43xxx devices) 
 977:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
 978:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
 979:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 980:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 981:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 982:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 725              		.loc 1 982 1 is_stmt 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 983:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 730              		.loc 1 983 3 view .LVU162
 984:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 985:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 986:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 731              		.loc 1 986 3 view .LVU163
 987:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 988:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 732              		.loc 1 988 3 view .LVU164
 733              		.loc 1 988 11 is_stmt 0 view .LVU165
 734 0000 034B     		ldr	r3, .L63
 735 0002 5B68     		ldr	r3, [r3, #4]
 736              		.loc 1 988 6 view .LVU166
 737 0004 0342     		tst	r3, r0
 738 0006 01D0     		beq	.L62
 989:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 990:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 739              		.loc 1 990 15 view .LVU167
 740 0008 0120     		movs	r0, #1
 741              	.LVL35:
 742              		.loc 1 990 15 view .LVU168
 743 000a 7047     		bx	lr
 744              	.LVL36:
 745              	.L62:
 991:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 992:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 993:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 994:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 746              		.loc 1 994 15 view .LVU169
 747 000c 0020     		movs	r0, #0
 748              	.LVL37:
 995:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 996:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 997:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 749              		.loc 1 997 3 is_stmt 1 view .LVU170
 998:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 750              		.loc 1 998 1 is_stmt 0 view .LVU171
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 39


 751 000e 7047     		bx	lr
 752              	.L64:
 753              		.align	2
 754              	.L63:
 755 0010 00700040 		.word	1073770496
 756              		.cfi_endproc
 757              	.LFE139:
 759              		.section	.text.PWR_ClearFlag,"ax",%progbits
 760              		.align	1
 761              		.global	PWR_ClearFlag
 762              		.syntax unified
 763              		.thumb
 764              		.thumb_func
 766              	PWR_ClearFlag:
 767              	.LVL38:
 768              	.LFB140:
 999:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
1000:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
1001:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
1002:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
1003:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
1004:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
1005:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
1006:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
1007:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
1008:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
1009:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
1010:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 769              		.loc 1 1010 1 is_stmt 1 view -0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
1011:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
1012:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 774              		.loc 1 1012 3 view .LVU173
1013:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
1014:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1015:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_FLAG != PWR_FLAG_UDRDY)
 775              		.loc 1 1015 3 view .LVU174
 776              		.loc 1 1015 6 is_stmt 0 view .LVU175
 777 0000 B0F5402F 		cmp	r0, #786432
 778 0004 05D0     		beq	.L66
1016:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
1017:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |=  PWR_FLAG << 2;
 779              		.loc 1 1017 5 is_stmt 1 view .LVU176
 780              		.loc 1 1017 8 is_stmt 0 view .LVU177
 781 0006 064A     		ldr	r2, .L68
 782 0008 1368     		ldr	r3, [r2]
 783              		.loc 1 1017 13 view .LVU178
 784 000a 43EA8003 		orr	r3, r3, r0, lsl #2
 785 000e 1360     		str	r3, [r2]
 786 0010 7047     		bx	lr
 787              	.L66:
1018:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
1019:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
1020:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 40


1021:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CSR |= PWR_FLAG_UDRDY;
 788              		.loc 1 1021 5 is_stmt 1 view .LVU179
 789              		.loc 1 1021 8 is_stmt 0 view .LVU180
 790 0012 034A     		ldr	r2, .L68
 791 0014 5368     		ldr	r3, [r2, #4]
 792              		.loc 1 1021 14 view .LVU181
 793 0016 43F44023 		orr	r3, r3, #786432
 794 001a 5360     		str	r3, [r2, #4]
1022:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
1023:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1024:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
1025:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F410xx) || defined (STM32F41
1026:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
1027:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx  || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_
1028:libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 795              		.loc 1 1028 1 view .LVU182
 796 001c 7047     		bx	lr
 797              	.L69:
 798 001e 00BF     		.align	2
 799              	.L68:
 800 0020 00700040 		.word	1073770496
 801              		.cfi_endproc
 802              	.LFE140:
 804              		.text
 805              	.Letext0:
 806              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/ma
 807              		.file 4 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/sy
 808              		.file 5 "libraries/CMSIS/include/core_cm4.h"
 809              		.file 6 "libraries/CMSIS/Device/ST/STM32F4xx/include/stm32f4xx.h"
 810              		.file 7 "libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 41


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:21     .text.PWR_DeInit:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:27     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:54     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:60     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:78     .text.PWR_BackupAccessCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:83     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:89     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:120    .text.PWR_PVDLevelConfig:00000010 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:125    .text.PWR_PVDCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:131    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:149    .text.PWR_PVDCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:154    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:160    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:178    .text.PWR_WakeUpPinCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:183    .text.PWR_BackupRegulatorCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:189    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:207    .text.PWR_BackupRegulatorCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:212    .text.PWR_MainRegulatorModeConfig:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:218    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:249    .text.PWR_MainRegulatorModeConfig:00000010 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:254    .text.PWR_OverDriveCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:260    .text.PWR_OverDriveCmd:00000000 PWR_OverDriveCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:278    .text.PWR_OverDriveCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:283    .text.PWR_OverDriveSWCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:289    .text.PWR_OverDriveSWCmd:00000000 PWR_OverDriveSWCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:307    .text.PWR_OverDriveSWCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:312    .text.PWR_UnderDriveCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:318    .text.PWR_UnderDriveCmd:00000000 PWR_UnderDriveCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:351    .text.PWR_UnderDriveCmd:0000001c $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:356    .text.PWR_MainRegulatorUnderDriveCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:362    .text.PWR_MainRegulatorUnderDriveCmd:00000000 PWR_MainRegulatorUnderDriveCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:391    .text.PWR_MainRegulatorUnderDriveCmd:00000014 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:396    .text.PWR_LowRegulatorUnderDriveCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:402    .text.PWR_LowRegulatorUnderDriveCmd:00000000 PWR_LowRegulatorUnderDriveCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:431    .text.PWR_LowRegulatorUnderDriveCmd:00000014 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:436    .text.PWR_FlashPowerDownCmd:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:442    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:460    .text.PWR_FlashPowerDownCmd:00000008 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:465    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:471    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:557    .text.PWR_EnterSTOPMode:00000030 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:565    .text.PWR_EnterUnderDriveSTOPMode:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:571    .text.PWR_EnterUnderDriveSTOPMode:00000000 PWR_EnterUnderDriveSTOPMode
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:656    .text.PWR_EnterUnderDriveSTOPMode:00000030 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:664    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:670    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:710    .text.PWR_EnterSTANDBYMode:00000018 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:716    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:722    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:755    .text.PWR_GetFlagStatus:00000010 $d
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:760    .text.PWR_ClearFlag:00000000 $t
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:766    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s:800    .text.PWR_ClearFlag:00000020 $d

UNDEFINED SYMBOLS
ARM GAS  C:\Users\ktkuru\AppData\Local\Temp\cc8myPhQ.s 			page 42


RCC_APB1PeriphResetCmd
