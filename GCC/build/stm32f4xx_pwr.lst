ARM GAS  /tmp/cc4Gy3j8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	PWR_DeInit:
  27              	.LFB123:
  28              		.file 1 "Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.8.1
   6:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    27-January-2022
   7:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Backup Domain Access
  10:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + PVD configuration
  11:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + WakeUp pin configuration
  12:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Main and Backup Regulators configuration
  13:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + FLASH Power Down configuration
  14:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Low Power modes configuration
  15:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           + Flags management
  16:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Copyright (c) 2016 STMicroelectronics.
  21:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * All rights reserved.
  22:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  23:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  24:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * in the root directory of this software component.
  25:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  26:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  28:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  29:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  30:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/cc4Gy3j8.s 			page 2


  31:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  32:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  33:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  34:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  35:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  36:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  37:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  38:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  39:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  40:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  41:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  42:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  43:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  44:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  45:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  46:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  47:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  48:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  49:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  50:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  51:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  52:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  53:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  54:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  55:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  56:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  57:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  58:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  59:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  60:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  61:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  62:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  63:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  64:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  65:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  66:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  67:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of ODEN bit */
  68:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define ODEN_BitNumber           0x10
  69:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_ODEN_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODEN_BitNumber * 4))
  70:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of ODSWEN bit */
  72:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define ODSWEN_BitNumber         0x11
  73:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_ODSWEN_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (ODSWEN_BitNumber * 4))
  74:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  75:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
  76:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of MRUDS bit */
  77:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define MRUDS_BitNumber         0x0B
  78:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_MRUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRUDS_BitNumber * 4))
  79:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of LPUDS bit */
  81:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define LPUDS_BitNumber         0x0A
  82:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_LPUDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPUDS_BitNumber * 4))
  83:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
  84:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  85:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
  86:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of MRLVDS bit */
  87:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define MRLVDS_BitNumber         0x0B
ARM GAS  /tmp/cc4Gy3j8.s 			page 3


  88:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_MRLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (MRLVDS_BitNumber * 4))
  89:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  90:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of LPLVDS bit */
  91:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define LPLVDS_BitNumber         0x0A
  92:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_LPLVDS_BB             (PERIPH_BB_BASE + (CR_OFFSET * 32) + (LPLVDS_BitNumber * 4))
  93:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
  94:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  96:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
  97:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  98:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  99:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
 100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
 101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F410xx || STM
 102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP2 bit */
 105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
 106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP1_BitNumber           0x08
 107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP1_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP1_BitNumber * 4))
 108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP2_BitNumber           0x07
 109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP2_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx)
 111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP3_BitNumber           0x06
 112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP3_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP2_BitNumber * 4))
 113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx */
 114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
 117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
 118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
 119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
 121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
 123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFF3FC)
 124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
 125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_VOS_MASK              ((uint32_t)0xFFFF3FFF)
 126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
 128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
 129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
 130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
 131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
 133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Backup Domain Access function  
 138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                   ##### Backup Domain Access function #####
 142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
ARM GAS  /tmp/cc4Gy3j8.s 			page 4


 145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
 146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       write accesses. 
 147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
 148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
 149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             RCC_APB1PeriphClockCmd() function.
 150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  29              		.loc 1 162 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  38              		.loc 1 163 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
 164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 164 3 view .LVU2
  44 000c 0021     		movs	r1, #0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
 165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 165 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	1
  55              		.global	PWR_BackupAccessCmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	PWR_BackupAccessCmd:
  62              	.LVL2:
  63              	.LFB124:
 166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
ARM GAS  /tmp/cc4Gy3j8.s 			page 5


 169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  64              		.loc 1 177 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 179 3 view .LVU5
 180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  70              		.loc 1 181 3 view .LVU6
  71              		.loc 1 181 32 is_stmt 0 view .LVU7
  72 0000 014B     		ldr	r3, .L4
  73 0002 1862     		str	r0, [r3, #32]
 182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  74              		.loc 1 182 1 view .LVU8
  75 0004 7047     		bx	lr
  76              	.L5:
  77 0006 00BF     		.align	2
  78              	.L4:
  79 0008 00000E42 		.word	1108213760
  80              		.cfi_endproc
  81              	.LFE124:
  83              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  84              		.align	1
  85              		.global	PWR_PVDLevelConfig
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	PWR_PVDLevelConfig:
  92              	.LVL3:
  93              	.LFB125:
 183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   PVD configuration functions 
 190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     ##### PVD configuration functions #####
 194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
ARM GAS  /tmp/cc4Gy3j8.s 			page 6


 198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           line16 and can generate an interrupt if enabled through the EXTI registers.
 201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The PVD is stopped in Standby mode.
 202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         detection level.
 222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  94              		.loc 1 225 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
 226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
  99              		.loc 1 226 3 view .LVU10
 227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 100              		.loc 1 229 3 view .LVU11
 230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 101              		.loc 1 231 3 view .LVU12
 102              		.loc 1 231 10 is_stmt 0 view .LVU13
 103 0000 034A     		ldr	r2, .L7
 104 0002 1368     		ldr	r3, [r2]
 105              	.LVL4:
 232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 106              		.loc 1 234 3 is_stmt 1 view .LVU14
 107              		.loc 1 234 10 is_stmt 0 view .LVU15
 108 0004 23F0E003 		bic	r3, r3, #224
 109              	.LVL5:
 235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 110              		.loc 1 237 3 is_stmt 1 view .LVU16
ARM GAS  /tmp/cc4Gy3j8.s 			page 7


 111              		.loc 1 237 10 is_stmt 0 view .LVU17
 112 0008 0343     		orrs	r3, r3, r0
 113              	.LVL6:
 238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 114              		.loc 1 240 3 is_stmt 1 view .LVU18
 115              		.loc 1 240 11 is_stmt 0 view .LVU19
 116 000a 1360     		str	r3, [r2]
 241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 117              		.loc 1 241 1 view .LVU20
 118 000c 7047     		bx	lr
 119              	.L8:
 120 000e 00BF     		.align	2
 121              	.L7:
 122 0010 00700040 		.word	1073770496
 123              		.cfi_endproc
 124              	.LFE125:
 126              		.section	.text.PWR_PVDCmd,"ax",%progbits
 127              		.align	1
 128              		.global	PWR_PVDCmd
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	PWR_PVDCmd:
 135              	.LVL7:
 136              	.LFB126:
 242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 137              		.loc 1 250 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 142              		.loc 1 252 3 view .LVU22
 253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 143              		.loc 1 254 3 view .LVU23
 144              		.loc 1 254 33 is_stmt 0 view .LVU24
 145 0000 014B     		ldr	r3, .L10
 146 0002 1861     		str	r0, [r3, #16]
 255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 147              		.loc 1 255 1 view .LVU25
 148 0004 7047     		bx	lr
 149              	.L11:
 150 0006 00BF     		.align	2
 151              	.L10:
ARM GAS  /tmp/cc4Gy3j8.s 			page 8


 152 0008 00000E42 		.word	1108213760
 153              		.cfi_endproc
 154              	.LFE126:
 156              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 157              		.align	1
 158              		.global	PWR_WakeUpPinCmd
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	PWR_WakeUpPinCmd:
 165              	.LVL8:
 166              	.LFB127:
 256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   WakeUp pin configuration functions 
 263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  ##### WakeUp pin configuration functions #####
 267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (++) For STM32F410xx/STM32F412xG/STM32F413_423xx there are three Wake-Up pins: Pin1 on P
 274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 167              		.loc 1 285 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 172              		.loc 1 287 3 view .LVU27
 288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 173              		.loc 1 289 3 view .LVU28
 174              		.loc 1 289 34 is_stmt 0 view .LVU29
 175 0000 014B     		ldr	r3, .L13
 176 0002 C3F8A000 		str	r0, [r3, #160]
ARM GAS  /tmp/cc4Gy3j8.s 			page 9


 290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 177              		.loc 1 290 1 view .LVU30
 178 0006 7047     		bx	lr
 179              	.L14:
 180              		.align	2
 181              	.L13:
 182 0008 00000E42 		.word	1108213760
 183              		.cfi_endproc
 184              	.LFE127:
 186              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 187              		.align	1
 188              		.global	PWR_BackupRegulatorCmd
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	PWR_BackupRegulatorCmd:
 195              	.LVL9:
 196              	.LFB128:
 291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_WakeUpPinx: specifies the WakeUp Pin.
 297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin1: WKUP1 pin is used for wakeup from Standby mode.
 299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin2: WKUP2 pin is used for wakeup from Standby mode.
 300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_WakeUp_Pin3: WKUP3 pin is used for wakeup from Standby mode.(only for STM32
 301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPinx, FunctionalState NewState)
 306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(NewState));
 310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_WakeUpPinx == PWR_WakeUp_Pin1) /* PWR_WakeUp_Pin1 */
 311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP1_BB = (uint32_t)NewState;
 313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F410xx)|| defined(STM32F412xG) || defined(STM32F413_423xx)  
 315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else if(PWR_WakeUpPinx == PWR_WakeUp_Pin3) /* PWR_WakeUp_Pin3 */
 316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP3_BB = (uint32_t)NewState;
 318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx */  
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else /* PWR_WakeUp_Pin2 */
 321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CSR_EWUP2_BB = (uint32_t)NewState;
 323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
 326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
ARM GAS  /tmp/cc4Gy3j8.s 			page 10


 329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Main and Backup Regulators configuration functions 
 333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           ##### Main and Backup Regulators configuration functions #####
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
 340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
 341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           retained even in Standby or VBAT mode when the low power backup regulator
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
 343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           always present. You can use the PWR_BackupRegulatorCmd() function to 
 344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           enable the low power backup regulator and use the PWR_GetFlagStatus
 345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (PWR_FLAG_BRR) to check if it is ready or not. 
 346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
 348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           save battery life.
 350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The backup SRAM is not mass erased by an tamper event. It is read 
 352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           protected to prevent confidential data, such as cryptographic private 
 353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           key, from being accessed. The backup SRAM can be erased only through 
 354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the Flash interface when a protection level change from level 1 to 
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           level 0 is requested. 
 356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       -@- Refer to the description of Read protection (RDP) in the reference manual.
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) The main internal regulator can be configured to have a tradeoff between 
 359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           performance and power consumption when the device does not operate at 
 360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           the maximum frequency. 
 361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) For STM32F405xx/407xx and STM32F415xx/417xx  Devices, the regulator can be     
 362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           configured on the fly through PWR_MainRegulatorModeConfig() function which  
 363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           configure VOS bit in PWR_CR register:
 364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When this bit is set (Regulator voltage output Scale 1 mode selected) 
 365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 2 mode selected) 
 367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.
 368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              
 369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the regulator can be configured through    
 370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            PWR_MainRegulatorModeConfig() function which configure VOS[1:0] bits in
 371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            PWR_CR register:  
 372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            which configure VOS[1:0] bits in PWR_CR register: 
 373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 11 (Regulator voltage output Scale 1 mode selected) 
 374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 168 MHz. 
 375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 10 (Regulator voltage output Scale 2 mode selected) 
 376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 144 MHz.  
 377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) When VOS[1:0] = 01 (Regulator voltage output Scale 3 mode selected) 
 378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              the System frequency can go up to 120 MHz. 
 379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                           
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, the scale can be modified only when the PLL 
 381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            is OFF and the HSI or HSE clock source is selected as system clock. 
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            The new value programmed is active only when the PLL is ON.
 383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            When the PLL is OFF, the voltage scale 3 is automatically selected. 
 384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         Refer to the datasheets for more details.
 385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         
ARM GAS  /tmp/cc4Gy3j8.s 			page 11


 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Run mode: the main regulator has
 387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            2 operating modes available:
 388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Normal mode: The CPU and core logic operate at maximum frequency at a given 
 389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              voltage scaling (scale 1, scale 2 or scale 3)
 390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Over-drive mode: This mode allows the CPU and the core logic to operate at a 
 391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             higher frequency than the normal mode for a given voltage scaling (scale 1,  
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             scale 2 or scale 3). This mode is enabled through PWR_OverDriveCmd() function and
 393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             PWR_OverDriveSWCmd() function, to enter or exit from Over-drive mode please follow 
 394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             the sequence described in Reference manual.
 395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              
 396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        (+) For STM32F42xxx/43xxx Devices, in Stop mode: the main regulator or low power regulator 
 397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            supplies a low power voltage to the 1.2V domain, thus preserving the content of register
 398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            and internal SRAM. 2 operating modes are available:
 399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          (++) Normal mode: the 1.2V domain is preserved in nominal leakage mode. This mode is only 
 400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is used in Scale 3 or 
 401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               low voltage mode.
 402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          (++) Under-drive mode: the 1.2V domain is preserved in reduced leakage mode. This mode is 
 403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               available when the main regulator or the low power regulator is in low voltage mode.
 404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               This mode is enabled through PWR_UnderDriveCmd() function.
 405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****             
 406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 197              		.loc 1 417 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 202              		.loc 1 419 3 view .LVU32
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 203              		.loc 1 421 3 view .LVU33
 204              		.loc 1 421 33 is_stmt 0 view .LVU34
 205 0000 014B     		ldr	r3, .L16
 206 0002 C3F8A400 		str	r0, [r3, #164]
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 207              		.loc 1 422 1 view .LVU35
 208 0006 7047     		bx	lr
 209              	.L17:
 210              		.align	2
 211              	.L16:
 212 0008 00000E42 		.word	1108213760
 213              		.cfi_endproc
 214              	.LFE128:
 216              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 217              		.align	1
ARM GAS  /tmp/cc4Gy3j8.s 			page 12


 218              		.global	PWR_MainRegulatorModeConfig
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	PWR_MainRegulatorModeConfig:
 225              	.LVL10:
 226              	.LFB129:
 423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
 435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 120 MHz (only for STM32F4
 436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 227              		.loc 1 439 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 232              		.loc 1 440 3 view .LVU37
 441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 	
 442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 233              		.loc 1 443 3 view .LVU38
 444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 234              		.loc 1 445 3 view .LVU39
 235              		.loc 1 445 10 is_stmt 0 view .LVU40
 236 0000 034A     		ldr	r2, .L19
 237 0002 1368     		ldr	r3, [r2]
 238              	.LVL11:
 446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear VOS[15:14] bits */
 448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_VOS_MASK;
 239              		.loc 1 448 3 is_stmt 1 view .LVU41
 240              		.loc 1 448 10 is_stmt 0 view .LVU42
 241 0004 23F44043 		bic	r3, r3, #49152
 242              	.LVL12:
 449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
 451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator_Voltage;
 243              		.loc 1 451 3 is_stmt 1 view .LVU43
 244              		.loc 1 451 10 is_stmt 0 view .LVU44
 245 0008 0343     		orrs	r3, r3, r0
 246              	.LVL13:
ARM GAS  /tmp/cc4Gy3j8.s 			page 13


 452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 247              		.loc 1 454 3 is_stmt 1 view .LVU45
 248              		.loc 1 454 11 is_stmt 0 view .LVU46
 249 000a 1360     		str	r3, [r2]
 455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 250              		.loc 1 455 1 view .LVU47
 251 000c 7047     		bx	lr
 252              	.L20:
 253 000e 00BF     		.align	2
 254              	.L19:
 255 0010 00700040 		.word	1073770496
 256              		.cfi_endproc
 257              	.LFE129:
 259              		.section	.text.PWR_OverDriveCmd,"ax",%progbits
 260              		.align	1
 261              		.global	PWR_OverDriveCmd
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	PWR_OverDriveCmd:
 268              	.LVL14:
 269              	.LFB130:
 456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive.
 459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This mode allows the CPU and the core logic to operate at a higher frequency
 462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         than the normal mode for a given voltage scaling (scale 1, scale 2 or scale 3).   
 463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   It is recommended to enter or exit Over-drive mode when the application is not running 
 465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          critical tasks and when the system clock source is either HSI or HSE. 
 466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          During the Over-drive switch activation, no peripheral clocks should be enabled.   
 467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          The peripheral clocks must be enabled once the Over-drive mode is activated.
 468:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            
 469:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive mode.
 470:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 471:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 472:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 473:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_OverDriveCmd(FunctionalState NewState)
 474:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 270              		.loc 1 474 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 476:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 275              		.loc 1 476 3 view .LVU49
 477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 478:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
 479:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 276              		.loc 1 479 3 view .LVU50
 277              		.loc 1 479 33 is_stmt 0 view .LVU51
ARM GAS  /tmp/cc4Gy3j8.s 			page 14


 278 0000 014B     		ldr	r3, .L22
 279 0002 1864     		str	r0, [r3, #64]
 480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 280              		.loc 1 480 1 view .LVU52
 281 0004 7047     		bx	lr
 282              	.L23:
 283 0006 00BF     		.align	2
 284              	.L22:
 285 0008 00000E42 		.word	1108213760
 286              		.cfi_endproc
 287              	.LFE130:
 289              		.section	.text.PWR_OverDriveSWCmd,"ax",%progbits
 290              		.align	1
 291              		.global	PWR_OverDriveSWCmd
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	PWR_OverDriveSWCmd:
 298              	.LVL15:
 299              	.LFB131:
 481:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 482:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 483:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Over-Drive switching.
 484:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 485:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices. 
 486:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *       
 487:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Over Drive switching mode.
 488:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 490:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 491:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_OverDriveSWCmd(FunctionalState NewState)
 492:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 300              		.loc 1 492 1 is_stmt 1 view -0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 493:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 494:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 305              		.loc 1 494 3 view .LVU54
 495:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 496:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
 497:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 306              		.loc 1 497 3 view .LVU55
 307              		.loc 1 497 35 is_stmt 0 view .LVU56
 308 0000 014B     		ldr	r3, .L25
 309 0002 5864     		str	r0, [r3, #68]
 498:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 310              		.loc 1 498 1 view .LVU57
 311 0004 7047     		bx	lr
 312              	.L26:
 313 0006 00BF     		.align	2
 314              	.L25:
 315 0008 00000E42 		.word	1108213760
 316              		.cfi_endproc
 317              	.LFE131:
ARM GAS  /tmp/cc4Gy3j8.s 			page 15


 319              		.section	.text.PWR_UnderDriveCmd,"ax",%progbits
 320              		.align	1
 321              		.global	PWR_UnderDriveCmd
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	PWR_UnderDriveCmd:
 328              	.LVL16:
 329              	.LFB132:
 499:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 500:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   Enables or disables the Under-Drive mode.
 502:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx devices.
 504:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note    This mode is enabled only with STOP low power mode.
 505:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          In this mode, the 1.2V domain is preserved in reduced leakage mode. This 
 506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          mode is only available when the main regulator or the low power regulator 
 507:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          is in low voltage mode
 508:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *        
 509:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the Under-drive mode was enabled, it is automatically disabled after 
 510:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         exiting Stop mode. 
 511:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         When the voltage regulator operates in Under-drive mode, an additional  
 512:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is induced when waking up from Stop mode.
 513:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                    
 514:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Under Drive mode.
 515:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 517:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 518:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_UnderDriveCmd(FunctionalState NewState)
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 330              		.loc 1 519 1 is_stmt 1 view -0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 520:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 335              		.loc 1 521 3 view .LVU59
 522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 336              		.loc 1 523 3 view .LVU60
 337              		.loc 1 523 6 is_stmt 0 view .LVU61
 338 0000 28B1     		cbz	r0, .L28
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Set the UDEN[1:0] bits to enable the Under Drive mode */
 526:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= (uint32_t)PWR_CR_UDEN;
 339              		.loc 1 526 5 is_stmt 1 view .LVU62
 340              		.loc 1 526 13 is_stmt 0 view .LVU63
 341 0002 064A     		ldr	r2, .L30
 342 0004 1368     		ldr	r3, [r2]
 343 0006 43F44023 		orr	r3, r3, #786432
 344 000a 1360     		str	r3, [r2]
 345 000c 7047     		bx	lr
 346              	.L28:
 527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
ARM GAS  /tmp/cc4Gy3j8.s 			page 16


 529:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
 531:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 347              		.loc 1 531 5 is_stmt 1 view .LVU64
 348              		.loc 1 531 13 is_stmt 0 view .LVU65
 349 000e 034A     		ldr	r2, .L30
 350 0010 1368     		ldr	r3, [r2]
 351 0012 23F44023 		bic	r3, r3, #786432
 352 0016 1360     		str	r3, [r2]
 532:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 353              		.loc 1 533 1 view .LVU66
 354 0018 7047     		bx	lr
 355              	.L31:
 356 001a 00BF     		.align	2
 357              	.L30:
 358 001c 00700040 		.word	1073770496
 359              		.cfi_endproc
 360              	.LFE132:
 362              		.section	.text.PWR_MainRegulatorUnderDriveCmd,"ax",%progbits
 363              		.align	1
 364              		.global	PWR_MainRegulatorUnderDriveCmd
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv4-sp-d16
 370              	PWR_MainRegulatorUnderDriveCmd:
 371              	.LVL17:
 372              	.LFB133:
 534:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 535:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)
 536:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 537:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator under drive mode.
 538:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 539:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 540:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 541:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Under Drive mode.
 542:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 544:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorUnderDriveCmd(FunctionalState NewState)
 546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** { 
 373              		.loc 1 546 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 547:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 548:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 378              		.loc 1 548 3 view .LVU68
 549:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 379              		.loc 1 550 3 view .LVU69
 380              		.loc 1 550 6 is_stmt 0 view .LVU70
 381 0000 18B1     		cbz	r0, .L33
 551:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)ENABLE;
ARM GAS  /tmp/cc4Gy3j8.s 			page 17


 382              		.loc 1 552 5 is_stmt 1 view .LVU71
 383              		.loc 1 552 36 is_stmt 0 view .LVU72
 384 0002 044B     		ldr	r3, .L35
 385 0004 0122     		movs	r2, #1
 386 0006 DA62     		str	r2, [r3, #44]
 387 0008 7047     		bx	lr
 388              	.L33:
 553:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 555:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 556:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRUDS_BB = (uint32_t)DISABLE;
 389              		.loc 1 556 5 is_stmt 1 view .LVU73
 390              		.loc 1 556 36 is_stmt 0 view .LVU74
 391 000a 024B     		ldr	r3, .L35
 392 000c 0022     		movs	r2, #0
 393 000e DA62     		str	r2, [r3, #44]
 557:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 394              		.loc 1 558 1 view .LVU75
 395 0010 7047     		bx	lr
 396              	.L36:
 397 0012 00BF     		.align	2
 398              	.L35:
 399 0014 00000E42 		.word	1108213760
 400              		.cfi_endproc
 401              	.LFE133:
 403              		.section	.text.PWR_LowRegulatorUnderDriveCmd,"ax",%progbits
 404              		.align	1
 405              		.global	PWR_LowRegulatorUnderDriveCmd
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv4-sp-d16
 411              	PWR_LowRegulatorUnderDriveCmd:
 412              	.LVL18:
 413              	.LFB134:
 559:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 561:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator under drive mode.
 562:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 563:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F427_437xx/STM32F429_439xx/STM32F446xx devices.
 564:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 565:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Under Drive mode.
 566:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 567:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 568:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 569:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorUnderDriveCmd(FunctionalState NewState)
 570:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 414              		.loc 1 570 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 571:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 572:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 419              		.loc 1 572 3 view .LVU77
 573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
ARM GAS  /tmp/cc4Gy3j8.s 			page 18


 574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 420              		.loc 1 574 3 view .LVU78
 421              		.loc 1 574 6 is_stmt 0 view .LVU79
 422 0000 18B1     		cbz	r0, .L38
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)ENABLE;
 423              		.loc 1 576 5 is_stmt 1 view .LVU80
 424              		.loc 1 576 36 is_stmt 0 view .LVU81
 425 0002 044B     		ldr	r3, .L40
 426 0004 0122     		movs	r2, #1
 427 0006 9A62     		str	r2, [r3, #40]
 428 0008 7047     		bx	lr
 429              	.L38:
 577:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 580:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPUDS_BB = (uint32_t)DISABLE;
 430              		.loc 1 580 5 is_stmt 1 view .LVU82
 431              		.loc 1 580 36 is_stmt 0 view .LVU83
 432 000a 024B     		ldr	r3, .L40
 433 000c 0022     		movs	r2, #0
 434 000e 9A62     		str	r2, [r3, #40]
 581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 582:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 435              		.loc 1 582 1 view .LVU84
 436 0010 7047     		bx	lr
 437              	.L41:
 438 0012 00BF     		.align	2
 439              	.L40:
 440 0014 00000E42 		.word	1108213760
 441              		.cfi_endproc
 442              	.LFE134:
 444              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 445              		.align	1
 446              		.global	PWR_FlashPowerDownCmd
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu fpv4-sp-d16
 452              	PWR_FlashPowerDownCmd:
 453              	.LVL19:
 454              	.LFB135:
 583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F446xx */
 584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) ||
 586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Main Regulator low voltage mode.
 588:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 589:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 591:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Main Regulator Low Voltage mode.
 592:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 593:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 594:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorLowVoltageCmd(FunctionalState NewState)
 596:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** { 
 597:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
ARM GAS  /tmp/cc4Gy3j8.s 			page 19


 598:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 599:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 600:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 601:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 602:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
 603:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 604:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 605:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 606:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
 607:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 608:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 609:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 610:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief Enables or disables the Low Power Regulator low voltage mode.
 612:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 613:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412xG/STM32F41
 614:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Low Power Regulator Low Voltage mode.
 616:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 618:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 619:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_LowRegulatorLowVoltageCmd(FunctionalState NewState)
 620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 621:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 622:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 624:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (NewState != DISABLE)
 625:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
 627:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
 631:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 633:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx */
 634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 635:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 637:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 638:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 639:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   FLASH Power Down configuration functions 
 641:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 642:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 643:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              ##### FLASH Power Down configuration functions #####
 645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 647:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           PWR_FlashPowerDownCmd() function, the Flash memory also enters power 
 649:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           down mode when the device enters Stop mode. When the Flash memory 
 650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           is in power down mode, an additional startup delay is incurred when 
 651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           waking up from Stop mode.
 652:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 654:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
ARM GAS  /tmp/cc4Gy3j8.s 			page 20


 655:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 657:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 658:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 660:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 661:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 662:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 663:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 455              		.loc 1 663 1 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 664:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 665:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460              		.loc 1 665 3 view .LVU86
 666:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 667:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 461              		.loc 1 667 3 view .LVU87
 462              		.loc 1 667 33 is_stmt 0 view .LVU88
 463 0000 014B     		ldr	r3, .L43
 464 0002 5862     		str	r0, [r3, #36]
 668:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 465              		.loc 1 668 1 view .LVU89
 466 0004 7047     		bx	lr
 467              	.L44:
 468 0006 00BF     		.align	2
 469              	.L43:
 470 0008 00000E42 		.word	1108213760
 471              		.cfi_endproc
 472              	.LFE135:
 474              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 475              		.align	1
 476              		.global	PWR_EnterSTOPMode
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	PWR_EnterSTOPMode:
 483              	.LVL20:
 484              	.LFB136:
 669:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 670:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 671:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 672:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 674:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Low Power modes configuration functions 
 676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 677:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 678:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 679:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****               ##### Low Power modes configuration functions #####
 680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 681:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The devices feature 3 low-power modes:
 683:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
ARM GAS  /tmp/cc4Gy3j8.s 			page 21


 684:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           in low power mode
 686:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 687:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Sleep mode ***
 689:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==================
 690:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 692:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Sleep mode is entered by using the __WFI() or __WFE() functions.
 693:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 694:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt 
 695:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              controller (NVIC) can wake up the device from Sleep mode.
 696:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 697:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Stop mode ***
 698:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =================
 699:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 700:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 701:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 702:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       are preserved.
 703:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 704:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 705:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       entering the Stop mode. It can be switched on again by software after exiting 
 706:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       the Stop mode using the PWR_FlashPowerDownCmd() function. 
 707:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 708:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 709:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Stop mode is entered using the PWR_EnterSTOPMode(PWR_MainRegulator_ON) 
 710:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              function with:
 711:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Main regulator ON.
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Low Power regulator ON.
 713:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Standby mode ***
 717:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ====================
 718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 719:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 720:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 722:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 723:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       circuitry.
 725:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 726:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The voltage regulator is OFF.
 727:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 728:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Entry:
 729:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 730:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (+) Exit:
 731:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 732:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 733:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 734:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 735:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =============================================
 736:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     [..]
 737:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 738:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 739:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 740:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
ARM GAS  /tmp/cc4Gy3j8.s 			page 22


 741:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Stop mode
 742:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        
 743:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 744:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 745:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 746:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 747:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 748:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 750:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              is necessary to:
 751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 752:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 or Event modes) using the EXTI_Init() function.
 753:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 754:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 function
 755:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 756:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 757:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 functions.
 758:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 759:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 760:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  or Event modes) using the EXTI_Init() function.
 761:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 762:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig
 763:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                  RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 764:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 765:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       (#) RTC auto-wakeup (AWU) from the Standby mode
 766:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 767:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 768:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 769:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 770:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 and RTC_AlarmCmd() functions.
 771:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 772:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****              is necessary to:
 773:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 774:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 function
 775:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to detect the tamper or time stamp event using the
 776:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 777:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 functions.
 778:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 779:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 780:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****           (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(
 781:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                 RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 782:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 788:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 789:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 790:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 792:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 794:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 796:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 797:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
ARM GAS  /tmp/cc4Gy3j8.s 			page 23


 798:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 799:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 800:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_ON: STOP mode with regulator ON
 801:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_ON: STOP mode with low power regulator ON
 802:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 804:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 806:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 807:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 808:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 809:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 485              		.loc 1 809 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 810:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 490              		.loc 1 810 3 view .LVU91
 811:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 812:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 813:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 491              		.loc 1 813 3 view .LVU92
 814:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 492              		.loc 1 814 3 view .LVU93
 815:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 816:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 817:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 493              		.loc 1 817 3 view .LVU94
 494              		.loc 1 817 10 is_stmt 0 view .LVU95
 495 0000 0B4A     		ldr	r2, .L49
 496 0002 1368     		ldr	r3, [r2]
 497              	.LVL21:
 818:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 819:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 498              		.loc 1 819 3 is_stmt 1 view .LVU96
 499              		.loc 1 819 10 is_stmt 0 view .LVU97
 500 0004 23F44063 		bic	r3, r3, #3072
 501              	.LVL22:
 502              		.loc 1 819 10 view .LVU98
 503 0008 23F00303 		bic	r3, r3, #3
 504              	.LVL23:
 820:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
 822:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 505              		.loc 1 822 3 is_stmt 1 view .LVU99
 506              		.loc 1 822 10 is_stmt 0 view .LVU100
 507 000c 0343     		orrs	r3, r3, r0
 508              	.LVL24:
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 824:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 509              		.loc 1 825 3 is_stmt 1 view .LVU101
 510              		.loc 1 825 11 is_stmt 0 view .LVU102
 511 000e 1360     		str	r3, [r2]
 826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 827:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
ARM GAS  /tmp/cc4Gy3j8.s 			page 24


 828:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 512              		.loc 1 828 3 is_stmt 1 view .LVU103
 513              		.loc 1 828 12 is_stmt 0 view .LVU104
 514 0010 084A     		ldr	r2, .L49+4
 515 0012 1369     		ldr	r3, [r2, #16]
 516              	.LVL25:
 517              		.loc 1 828 12 view .LVU105
 518 0014 43F00403 		orr	r3, r3, #4
 519 0018 1361     		str	r3, [r2, #16]
 520              	.LVL26:
 829:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 830:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 831:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 521              		.loc 1 831 3 is_stmt 1 view .LVU106
 522              		.loc 1 831 5 is_stmt 0 view .LVU107
 523 001a 0129     		cmp	r1, #1
 524 001c 06D0     		beq	.L48
 832:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 833:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 835:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 836:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 837:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 838:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 839:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 525              		.loc 1 839 5 is_stmt 1 view .LVU108
 526              	.LBB12:
 527              	.LBI12:
 528              		.file 2 "Libraries/CMSIS/Include/core_cmInstr.h"
   1:Libraries/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:Libraries/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Libraries/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Libraries/CMSIS/Include/core_cmInstr.h ****  * @version  V4.10
   5:Libraries/CMSIS/Include/core_cmInstr.h ****  * @date     18. March 2015
   6:Libraries/CMSIS/Include/core_cmInstr.h ****  *
   7:Libraries/CMSIS/Include/core_cmInstr.h ****  * @note
   8:Libraries/CMSIS/Include/core_cmInstr.h ****  *
   9:Libraries/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:Libraries/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:Libraries/CMSIS/Include/core_cmInstr.h **** 
  12:Libraries/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:Libraries/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:Libraries/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:Libraries/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:Libraries/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:Libraries/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:Libraries/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:Libraries/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:Libraries/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:Libraries/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:Libraries/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:Libraries/CMSIS/Include/core_cmInstr.h ****    *
  24:Libraries/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:Libraries/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:Libraries/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:Libraries/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:Libraries/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
ARM GAS  /tmp/cc4Gy3j8.s 			page 25


  29:Libraries/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:Libraries/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:Libraries/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:Libraries/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:Libraries/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:Libraries/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:Libraries/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:Libraries/CMSIS/Include/core_cmInstr.h **** 
  37:Libraries/CMSIS/Include/core_cmInstr.h **** 
  38:Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:Libraries/CMSIS/Include/core_cmInstr.h **** 
  41:Libraries/CMSIS/Include/core_cmInstr.h **** 
  42:Libraries/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:Libraries/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:Libraries/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:Libraries/CMSIS/Include/core_cmInstr.h ****   @{
  46:Libraries/CMSIS/Include/core_cmInstr.h **** */
  47:Libraries/CMSIS/Include/core_cmInstr.h **** 
  48:Libraries/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:Libraries/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:Libraries/CMSIS/Include/core_cmInstr.h **** 
  51:Libraries/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:Libraries/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
  54:Libraries/CMSIS/Include/core_cmInstr.h **** 
  55:Libraries/CMSIS/Include/core_cmInstr.h **** 
  56:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:Libraries/CMSIS/Include/core_cmInstr.h **** 
  58:Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:Libraries/CMSIS/Include/core_cmInstr.h ****  */
  60:Libraries/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:Libraries/CMSIS/Include/core_cmInstr.h **** 
  62:Libraries/CMSIS/Include/core_cmInstr.h **** 
  63:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:Libraries/CMSIS/Include/core_cmInstr.h **** 
  65:Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:Libraries/CMSIS/Include/core_cmInstr.h ****  */
  68:Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:Libraries/CMSIS/Include/core_cmInstr.h **** 
  70:Libraries/CMSIS/Include/core_cmInstr.h **** 
  71:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:Libraries/CMSIS/Include/core_cmInstr.h **** 
  73:Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:Libraries/CMSIS/Include/core_cmInstr.h ****  */
  76:Libraries/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:Libraries/CMSIS/Include/core_cmInstr.h **** 
  78:Libraries/CMSIS/Include/core_cmInstr.h **** 
  79:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:Libraries/CMSIS/Include/core_cmInstr.h **** 
  81:Libraries/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:Libraries/CMSIS/Include/core_cmInstr.h ****  */
  83:Libraries/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:Libraries/CMSIS/Include/core_cmInstr.h **** 
  85:Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cc4Gy3j8.s 			page 26


  86:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:Libraries/CMSIS/Include/core_cmInstr.h **** 
  88:Libraries/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:Libraries/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:Libraries/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:Libraries/CMSIS/Include/core_cmInstr.h ****  */
  92:Libraries/CMSIS/Include/core_cmInstr.h **** #define __ISB() do {\
  93:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  94:Libraries/CMSIS/Include/core_cmInstr.h ****                    __isb(0xF);\
  95:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  96:Libraries/CMSIS/Include/core_cmInstr.h ****                 } while (0)
  97:Libraries/CMSIS/Include/core_cmInstr.h **** 
  98:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:Libraries/CMSIS/Include/core_cmInstr.h **** 
 100:Libraries/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:Libraries/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 103:Libraries/CMSIS/Include/core_cmInstr.h **** #define __DSB() do {\
 104:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 105:Libraries/CMSIS/Include/core_cmInstr.h ****                    __dsb(0xF);\
 106:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 107:Libraries/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 108:Libraries/CMSIS/Include/core_cmInstr.h **** 
 109:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:Libraries/CMSIS/Include/core_cmInstr.h **** 
 111:Libraries/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:Libraries/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 114:Libraries/CMSIS/Include/core_cmInstr.h **** #define __DMB() do {\
 115:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 116:Libraries/CMSIS/Include/core_cmInstr.h ****                    __dmb(0xF);\
 117:Libraries/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 118:Libraries/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 119:Libraries/CMSIS/Include/core_cmInstr.h **** 
 120:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:Libraries/CMSIS/Include/core_cmInstr.h **** 
 122:Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:Libraries/CMSIS/Include/core_cmInstr.h **** 
 124:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 126:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 127:Libraries/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 128:Libraries/CMSIS/Include/core_cmInstr.h **** 
 129:Libraries/CMSIS/Include/core_cmInstr.h **** 
 130:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:Libraries/CMSIS/Include/core_cmInstr.h **** 
 132:Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:Libraries/CMSIS/Include/core_cmInstr.h **** 
 134:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 136:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 137:Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:Libraries/CMSIS/Include/core_cmInstr.h **** {
 140:Libraries/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 141:Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 142:Libraries/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/cc4Gy3j8.s 			page 27


 143:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
 144:Libraries/CMSIS/Include/core_cmInstr.h **** 
 145:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:Libraries/CMSIS/Include/core_cmInstr.h **** 
 147:Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:Libraries/CMSIS/Include/core_cmInstr.h **** 
 149:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 151:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 152:Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:Libraries/CMSIS/Include/core_cmInstr.h **** {
 155:Libraries/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 156:Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 157:Libraries/CMSIS/Include/core_cmInstr.h **** }
 158:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
 159:Libraries/CMSIS/Include/core_cmInstr.h **** 
 160:Libraries/CMSIS/Include/core_cmInstr.h **** 
 161:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:Libraries/CMSIS/Include/core_cmInstr.h **** 
 163:Libraries/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:Libraries/CMSIS/Include/core_cmInstr.h **** 
 165:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 168:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 169:Libraries/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 170:Libraries/CMSIS/Include/core_cmInstr.h **** 
 171:Libraries/CMSIS/Include/core_cmInstr.h **** 
 172:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 173:Libraries/CMSIS/Include/core_cmInstr.h **** 
 174:Libraries/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:Libraries/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:Libraries/CMSIS/Include/core_cmInstr.h **** 
 177:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:Libraries/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 180:Libraries/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:Libraries/CMSIS/Include/core_cmInstr.h **** 
 182:Libraries/CMSIS/Include/core_cmInstr.h **** 
 183:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:Libraries/CMSIS/Include/core_cmInstr.h **** 
 185:Libraries/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:Libraries/CMSIS/Include/core_cmInstr.h **** 
 187:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 189:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 190:Libraries/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:Libraries/CMSIS/Include/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:Libraries/CMSIS/Include/core_cmInstr.h **** #else
 193:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:Libraries/CMSIS/Include/core_cmInstr.h **** {
 195:Libraries/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 196:Libraries/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:Libraries/CMSIS/Include/core_cmInstr.h **** 
 198:Libraries/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:Libraries/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
ARM GAS  /tmp/cc4Gy3j8.s 			page 28


 200:Libraries/CMSIS/Include/core_cmInstr.h ****   {
 201:Libraries/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 202:Libraries/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 203:Libraries/CMSIS/Include/core_cmInstr.h ****     s--;
 204:Libraries/CMSIS/Include/core_cmInstr.h ****   }
 205:Libraries/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:Libraries/CMSIS/Include/core_cmInstr.h ****   return(result);
 207:Libraries/CMSIS/Include/core_cmInstr.h **** }
 208:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
 209:Libraries/CMSIS/Include/core_cmInstr.h **** 
 210:Libraries/CMSIS/Include/core_cmInstr.h **** 
 211:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 212:Libraries/CMSIS/Include/core_cmInstr.h **** 
 213:Libraries/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:Libraries/CMSIS/Include/core_cmInstr.h **** 
 215:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:Libraries/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 217:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 218:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 219:Libraries/CMSIS/Include/core_cmInstr.h **** 
 220:Libraries/CMSIS/Include/core_cmInstr.h **** 
 221:Libraries/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:Libraries/CMSIS/Include/core_cmInstr.h **** 
 223:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:Libraries/CMSIS/Include/core_cmInstr.h **** 
 225:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:Libraries/CMSIS/Include/core_cmInstr.h **** 
 227:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:Libraries/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 230:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:Libraries/CMSIS/Include/core_cmInstr.h **** 
 232:Libraries/CMSIS/Include/core_cmInstr.h **** 
 233:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:Libraries/CMSIS/Include/core_cmInstr.h **** 
 235:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:Libraries/CMSIS/Include/core_cmInstr.h **** 
 237:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 240:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:Libraries/CMSIS/Include/core_cmInstr.h **** 
 242:Libraries/CMSIS/Include/core_cmInstr.h **** 
 243:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:Libraries/CMSIS/Include/core_cmInstr.h **** 
 245:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:Libraries/CMSIS/Include/core_cmInstr.h **** 
 247:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 250:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:Libraries/CMSIS/Include/core_cmInstr.h **** 
 252:Libraries/CMSIS/Include/core_cmInstr.h **** 
 253:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:Libraries/CMSIS/Include/core_cmInstr.h **** 
 255:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:Libraries/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cc4Gy3j8.s 			page 29


 257:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 258:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 260:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 261:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 262:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:Libraries/CMSIS/Include/core_cmInstr.h **** 
 264:Libraries/CMSIS/Include/core_cmInstr.h **** 
 265:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:Libraries/CMSIS/Include/core_cmInstr.h **** 
 267:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:Libraries/CMSIS/Include/core_cmInstr.h **** 
 269:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 270:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 272:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 273:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 274:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:Libraries/CMSIS/Include/core_cmInstr.h **** 
 276:Libraries/CMSIS/Include/core_cmInstr.h **** 
 277:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:Libraries/CMSIS/Include/core_cmInstr.h **** 
 279:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:Libraries/CMSIS/Include/core_cmInstr.h **** 
 281:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 282:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 284:Libraries/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 285:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 286:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:Libraries/CMSIS/Include/core_cmInstr.h **** 
 288:Libraries/CMSIS/Include/core_cmInstr.h **** 
 289:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:Libraries/CMSIS/Include/core_cmInstr.h **** 
 291:Libraries/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:Libraries/CMSIS/Include/core_cmInstr.h **** 
 293:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 294:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 295:Libraries/CMSIS/Include/core_cmInstr.h **** 
 296:Libraries/CMSIS/Include/core_cmInstr.h **** 
 297:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 298:Libraries/CMSIS/Include/core_cmInstr.h **** 
 299:Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 300:Libraries/CMSIS/Include/core_cmInstr.h **** 
 301:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 304:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 305:Libraries/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 306:Libraries/CMSIS/Include/core_cmInstr.h **** 
 307:Libraries/CMSIS/Include/core_cmInstr.h **** 
 308:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:Libraries/CMSIS/Include/core_cmInstr.h **** 
 310:Libraries/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 311:Libraries/CMSIS/Include/core_cmInstr.h **** 
 312:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  /tmp/cc4Gy3j8.s 			page 30


 314:Libraries/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 315:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 316:Libraries/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 317:Libraries/CMSIS/Include/core_cmInstr.h **** 
 318:Libraries/CMSIS/Include/core_cmInstr.h **** 
 319:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:Libraries/CMSIS/Include/core_cmInstr.h **** 
 321:Libraries/CMSIS/Include/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:Libraries/CMSIS/Include/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:Libraries/CMSIS/Include/core_cmInstr.h **** 
 324:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:Libraries/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 326:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 327:Libraries/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:Libraries/CMSIS/Include/core_cmInstr.h **** {
 330:Libraries/CMSIS/Include/core_cmInstr.h ****   rrx r0, r0
 331:Libraries/CMSIS/Include/core_cmInstr.h ****   bx lr
 332:Libraries/CMSIS/Include/core_cmInstr.h **** }
 333:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
 334:Libraries/CMSIS/Include/core_cmInstr.h **** 
 335:Libraries/CMSIS/Include/core_cmInstr.h **** 
 336:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:Libraries/CMSIS/Include/core_cmInstr.h **** 
 338:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:Libraries/CMSIS/Include/core_cmInstr.h **** 
 340:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:Libraries/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 343:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:Libraries/CMSIS/Include/core_cmInstr.h **** 
 345:Libraries/CMSIS/Include/core_cmInstr.h **** 
 346:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:Libraries/CMSIS/Include/core_cmInstr.h **** 
 348:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:Libraries/CMSIS/Include/core_cmInstr.h **** 
 350:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 353:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:Libraries/CMSIS/Include/core_cmInstr.h **** 
 355:Libraries/CMSIS/Include/core_cmInstr.h **** 
 356:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:Libraries/CMSIS/Include/core_cmInstr.h **** 
 358:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:Libraries/CMSIS/Include/core_cmInstr.h **** 
 360:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:Libraries/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 363:Libraries/CMSIS/Include/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:Libraries/CMSIS/Include/core_cmInstr.h **** 
 365:Libraries/CMSIS/Include/core_cmInstr.h **** 
 366:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:Libraries/CMSIS/Include/core_cmInstr.h **** 
 368:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:Libraries/CMSIS/Include/core_cmInstr.h **** 
 370:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
ARM GAS  /tmp/cc4Gy3j8.s 			page 31


 371:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 373:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:Libraries/CMSIS/Include/core_cmInstr.h **** 
 375:Libraries/CMSIS/Include/core_cmInstr.h **** 
 376:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:Libraries/CMSIS/Include/core_cmInstr.h **** 
 378:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:Libraries/CMSIS/Include/core_cmInstr.h **** 
 380:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 381:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 383:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:Libraries/CMSIS/Include/core_cmInstr.h **** 
 385:Libraries/CMSIS/Include/core_cmInstr.h **** 
 386:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:Libraries/CMSIS/Include/core_cmInstr.h **** 
 388:Libraries/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:Libraries/CMSIS/Include/core_cmInstr.h **** 
 390:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 391:Libraries/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 393:Libraries/CMSIS/Include/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:Libraries/CMSIS/Include/core_cmInstr.h **** 
 395:Libraries/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:Libraries/CMSIS/Include/core_cmInstr.h **** 
 397:Libraries/CMSIS/Include/core_cmInstr.h **** 
 398:Libraries/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:Libraries/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 400:Libraries/CMSIS/Include/core_cmInstr.h **** 
 401:Libraries/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:Libraries/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:Libraries/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:Libraries/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:Libraries/CMSIS/Include/core_cmInstr.h **** #else
 408:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:Libraries/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:Libraries/CMSIS/Include/core_cmInstr.h **** #endif
 411:Libraries/CMSIS/Include/core_cmInstr.h **** 
 412:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 413:Libraries/CMSIS/Include/core_cmInstr.h **** 
 414:Libraries/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 416:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:Libraries/CMSIS/Include/core_cmInstr.h **** {
 418:Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 419:Libraries/CMSIS/Include/core_cmInstr.h **** }
 420:Libraries/CMSIS/Include/core_cmInstr.h **** 
 421:Libraries/CMSIS/Include/core_cmInstr.h **** 
 422:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:Libraries/CMSIS/Include/core_cmInstr.h **** 
 424:Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:Libraries/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 426:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 427:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
ARM GAS  /tmp/cc4Gy3j8.s 			page 32


 428:Libraries/CMSIS/Include/core_cmInstr.h **** {
 429:Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:Libraries/CMSIS/Include/core_cmInstr.h **** }
 431:Libraries/CMSIS/Include/core_cmInstr.h **** 
 432:Libraries/CMSIS/Include/core_cmInstr.h **** 
 433:Libraries/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 434:Libraries/CMSIS/Include/core_cmInstr.h **** 
 435:Libraries/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:Libraries/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:Libraries/CMSIS/Include/core_cmInstr.h ****  */
 438:Libraries/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 529              		.loc 2 438 53 view .LVU109
 530              	.LBB13:
 439:Libraries/CMSIS/Include/core_cmInstr.h **** {
 440:Libraries/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 531              		.loc 2 440 3 view .LVU110
 532              		.syntax unified
 533              	@ 440 "Libraries/CMSIS/Include/core_cmInstr.h" 1
 534 001e 20BF     		wfe
 535              	@ 0 "" 2
 536              		.thumb
 537              		.syntax unified
 538              	.L47:
 539              	.LBE13:
 540              	.LBE12:
 840:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 841:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 842:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 541              		.loc 1 842 3 view .LVU111
 542              		.loc 1 842 12 is_stmt 0 view .LVU112
 543 0020 044A     		ldr	r2, .L49+4
 544 0022 1369     		ldr	r3, [r2, #16]
 545 0024 23F00403 		bic	r3, r3, #4
 546 0028 1361     		str	r3, [r2, #16]
 843:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 547              		.loc 1 843 1 view .LVU113
 548 002a 7047     		bx	lr
 549              	.L48:
 834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 550              		.loc 1 834 5 is_stmt 1 view .LVU114
 551              	.LBB14:
 552              	.LBI14:
 427:Libraries/CMSIS/Include/core_cmInstr.h **** {
 553              		.loc 2 427 53 view .LVU115
 554              	.LBB15:
 429:Libraries/CMSIS/Include/core_cmInstr.h **** }
 555              		.loc 2 429 3 view .LVU116
 556              		.syntax unified
 557              	@ 429 "Libraries/CMSIS/Include/core_cmInstr.h" 1
 558 002c 30BF     		wfi
 559              	@ 0 "" 2
 430:Libraries/CMSIS/Include/core_cmInstr.h **** 
 560              		.loc 2 430 1 is_stmt 0 view .LVU117
 561              		.thumb
 562              		.syntax unified
 563 002e F7E7     		b	.L47
 564              	.L50:
ARM GAS  /tmp/cc4Gy3j8.s 			page 33


 565              		.align	2
 566              	.L49:
 567 0030 00700040 		.word	1073770496
 568 0034 00ED00E0 		.word	-536810240
 569              	.LBE15:
 570              	.LBE14:
 571              		.cfi_endproc
 572              	.LFE136:
 574              		.section	.text.PWR_EnterUnderDriveSTOPMode,"ax",%progbits
 575              		.align	1
 576              		.global	PWR_EnterUnderDriveSTOPMode
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	PWR_EnterUnderDriveSTOPMode:
 583              	.LVL27:
 584              	.LFB137:
 844:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 845:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters in Under-Drive STOP mode.
 847:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  
 848:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   This mode is only available for STM32F42xxx/STM3243xxx devices. 
 849:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * 
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note    This mode can be selected only when the Under-Drive is already active 
 851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         
 852:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 853:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 854:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 855:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 856:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 857:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 858:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.
 859:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 860:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 861:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 862:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_MainRegulator_UnderDrive_ON:  Main Regulator in under-drive mode 
 863:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 and Flash memory in power-down when the device is in Stop under-drive mode
 864:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_LowPowerRegulator_UnderDrive_ON:  Low Power Regulator in under-drive mode 
 865:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                and Flash memory in power-down when the device is in Stop under-drive mode
 866:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 867:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 868:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 869:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 870:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 871:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 872:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 873:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 585              		.loc 1 873 1 is_stmt 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 874:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 590              		.loc 1 874 3 view .LVU119
 875:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 876:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
ARM GAS  /tmp/cc4Gy3j8.s 			page 34


 877:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
 591              		.loc 1 877 3 view .LVU120
 878:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 592              		.loc 1 878 3 view .LVU121
 879:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 880:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 881:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 593              		.loc 1 881 3 view .LVU122
 594              		.loc 1 881 10 is_stmt 0 view .LVU123
 595 0000 0B4A     		ldr	r2, .L55
 596 0002 1368     		ldr	r3, [r2]
 597              	.LVL28:
 882:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDS bits */
 883:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 598              		.loc 1 883 3 is_stmt 1 view .LVU124
 599              		.loc 1 883 10 is_stmt 0 view .LVU125
 600 0004 23F44063 		bic	r3, r3, #3072
 601              	.LVL29:
 602              		.loc 1 883 10 view .LVU126
 603 0008 23F00303 		bic	r3, r3, #3
 604              	.LVL30:
 884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 885:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
 886:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 605              		.loc 1 886 3 is_stmt 1 view .LVU127
 606              		.loc 1 886 10 is_stmt 0 view .LVU128
 607 000c 0343     		orrs	r3, r3, r0
 608              	.LVL31:
 887:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 609              		.loc 1 889 3 is_stmt 1 view .LVU129
 610              		.loc 1 889 11 is_stmt 0 view .LVU130
 611 000e 1360     		str	r3, [r2]
 890:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 891:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 892:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 612              		.loc 1 892 3 is_stmt 1 view .LVU131
 613              		.loc 1 892 12 is_stmt 0 view .LVU132
 614 0010 084A     		ldr	r2, .L55+4
 615 0012 1369     		ldr	r3, [r2, #16]
 616              	.LVL32:
 617              		.loc 1 892 12 view .LVU133
 618 0014 43F00403 		orr	r3, r3, #4
 619 0018 1361     		str	r3, [r2, #16]
 620              	.LVL33:
 893:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 894:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 895:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 621              		.loc 1 895 3 is_stmt 1 view .LVU134
 622              		.loc 1 895 5 is_stmt 0 view .LVU135
 623 001a 0129     		cmp	r1, #1
 624 001c 06D0     		beq	.L54
 896:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 897:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 898:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 899:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
ARM GAS  /tmp/cc4Gy3j8.s 			page 35


 900:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 901:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 902:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 903:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 625              		.loc 1 903 5 is_stmt 1 view .LVU136
 626              	.LBB16:
 627              	.LBI16:
 438:Libraries/CMSIS/Include/core_cmInstr.h **** {
 628              		.loc 2 438 53 view .LVU137
 629              	.LBB17:
 630              		.loc 2 440 3 view .LVU138
 631              		.syntax unified
 632              	@ 440 "Libraries/CMSIS/Include/core_cmInstr.h" 1
 633 001e 20BF     		wfe
 634              	@ 0 "" 2
 635              		.thumb
 636              		.syntax unified
 637              	.L53:
 638              	.LBE17:
 639              	.LBE16:
 904:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 905:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 906:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 640              		.loc 1 906 3 view .LVU139
 641              		.loc 1 906 12 is_stmt 0 view .LVU140
 642 0020 044A     		ldr	r2, .L55+4
 643 0022 1369     		ldr	r3, [r2, #16]
 644 0024 23F00403 		bic	r3, r3, #4
 645 0028 1361     		str	r3, [r2, #16]
 907:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 646              		.loc 1 907 1 view .LVU141
 647 002a 7047     		bx	lr
 648              	.L54:
 898:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 649              		.loc 1 898 5 is_stmt 1 view .LVU142
 650              	.LBB18:
 651              	.LBI18:
 427:Libraries/CMSIS/Include/core_cmInstr.h **** {
 652              		.loc 2 427 53 view .LVU143
 653              	.LBB19:
 429:Libraries/CMSIS/Include/core_cmInstr.h **** }
 654              		.loc 2 429 3 view .LVU144
 655              		.syntax unified
 656              	@ 429 "Libraries/CMSIS/Include/core_cmInstr.h" 1
 657 002c 30BF     		wfi
 658              	@ 0 "" 2
 430:Libraries/CMSIS/Include/core_cmInstr.h **** 
 659              		.loc 2 430 1 is_stmt 0 view .LVU145
 660              		.thumb
 661              		.syntax unified
 662 002e F7E7     		b	.L53
 663              	.L56:
 664              		.align	2
 665              	.L55:
 666 0030 00700040 		.word	1073770496
 667 0034 00ED00E0 		.word	-536810240
 668              	.LBE19:
ARM GAS  /tmp/cc4Gy3j8.s 			page 36


 669              	.LBE18:
 670              		.cfi_endproc
 671              	.LFE137:
 673              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 674              		.align	1
 675              		.global	PWR_EnterSTANDBYMode
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu fpv4-sp-d16
 681              	PWR_EnterSTANDBYMode:
 682              	.LFB138:
 908:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 910:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 913:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 914:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 915:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 916:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.
 917:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   The Wakeup flag (WUF) need to be cleared at application level before to call this funct
 918:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 919:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 920:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 921:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 922:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 683              		.loc 1 922 1 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 923:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 924:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 688              		.loc 1 924 3 view .LVU147
 689              		.loc 1 924 11 is_stmt 0 view .LVU148
 690 0000 054A     		ldr	r2, .L58
 691 0002 1368     		ldr	r3, [r2]
 692 0004 43F00203 		orr	r3, r3, #2
 693 0008 1360     		str	r3, [r2]
 925:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 926:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 927:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 694              		.loc 1 927 3 is_stmt 1 view .LVU149
 695              		.loc 1 927 12 is_stmt 0 view .LVU150
 696 000a 044A     		ldr	r2, .L58+4
 697 000c 1369     		ldr	r3, [r2, #16]
 698 000e 43F00403 		orr	r3, r3, #4
 699 0012 1361     		str	r3, [r2, #16]
 928:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 929:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* This option is used to ensure that store operations are completed */
 930:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 931:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 932:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 933:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 934:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 700              		.loc 1 934 3 is_stmt 1 view .LVU151
ARM GAS  /tmp/cc4Gy3j8.s 			page 37


 701              	.LBB20:
 702              	.LBI20:
 427:Libraries/CMSIS/Include/core_cmInstr.h **** {
 703              		.loc 2 427 53 view .LVU152
 704              	.LBB21:
 429:Libraries/CMSIS/Include/core_cmInstr.h **** }
 705              		.loc 2 429 3 view .LVU153
 706              		.syntax unified
 707              	@ 429 "Libraries/CMSIS/Include/core_cmInstr.h" 1
 708 0014 30BF     		wfi
 709              	@ 0 "" 2
 710              		.thumb
 711              		.syntax unified
 712              	.LBE21:
 713              	.LBE20:
 935:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 714              		.loc 1 935 1 is_stmt 0 view .LVU154
 715 0016 7047     		bx	lr
 716              	.L59:
 717              		.align	2
 718              	.L58:
 719 0018 00700040 		.word	1073770496
 720 001c 00ED00E0 		.word	-536810240
 721              		.cfi_endproc
 722              	.LFE138:
 724              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 725              		.align	1
 726              		.global	PWR_GetFlagStatus
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu fpv4-sp-d16
 732              	PWR_GetFlagStatus:
 733              	.LVL34:
 734              	.LFB139:
 936:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 937:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 938:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 939:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 940:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 941:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 942:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *  @brief   Flags management functions 
 943:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
 944:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 945:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 946:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     ##### Flags management functions #####
 947:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 948:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 949:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 950:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 951:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 952:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 953:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 954:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 956:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
ARM GAS  /tmp/cc4Gy3j8.s 			page 38


 958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 959:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 960:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 961:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 962:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 963:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 964:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 965:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 966:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 967:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 968:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 969:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 970:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 971:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 972:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready.
 973:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODRDY: This flag indicates that the Over-drive mode
 974:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 is ready (STM32F42xxx/43xxx devices) 
 975:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_ODSWRDY: This flag indicates that the Over-drive mode
 976:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 switching is ready (STM32F42xxx/43xxx devices) 
 977:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
 978:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
 979:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 980:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 981:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 982:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 735              		.loc 1 982 1 is_stmt 1 view -0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739              		@ link register save eliminated.
 983:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 740              		.loc 1 983 3 view .LVU156
 984:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 985:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 986:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 741              		.loc 1 986 3 view .LVU157
 987:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 988:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 742              		.loc 1 988 3 view .LVU158
 743              		.loc 1 988 11 is_stmt 0 view .LVU159
 744 0000 034B     		ldr	r3, .L63
 745 0002 5B68     		ldr	r3, [r3, #4]
 746              		.loc 1 988 6 view .LVU160
 747 0004 0342     		tst	r3, r0
 748 0006 01D0     		beq	.L62
 989:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 990:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 749              		.loc 1 990 15 view .LVU161
 750 0008 0120     		movs	r0, #1
 751              	.LVL35:
 752              		.loc 1 990 15 view .LVU162
 753 000a 7047     		bx	lr
 754              	.LVL36:
 755              	.L62:
 991:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 992:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 993:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
ARM GAS  /tmp/cc4Gy3j8.s 			page 39


 994:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 756              		.loc 1 994 15 view .LVU163
 757 000c 0020     		movs	r0, #0
 758              	.LVL37:
 995:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 996:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 759              		.loc 1 997 3 is_stmt 1 view .LVU164
 998:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 760              		.loc 1 998 1 is_stmt 0 view .LVU165
 761 000e 7047     		bx	lr
 762              	.L64:
 763              		.align	2
 764              	.L63:
 765 0010 00700040 		.word	1073770496
 766              		.cfi_endproc
 767              	.LFE139:
 769              		.section	.text.PWR_ClearFlag,"ax",%progbits
 770              		.align	1
 771              		.global	PWR_ClearFlag
 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 775              		.fpu fpv4-sp-d16
 777              	PWR_ClearFlag:
 778              	.LVL38:
 779              	.LFB140:
 999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
1000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
1001:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
1002:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
1003:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
1004:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
1005:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
1006:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
1007:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
1008:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
1009:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
1010:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 780              		.loc 1 1010 1 is_stmt 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
1011:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
1012:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 785              		.loc 1 1012 3 view .LVU167
1013:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
1014:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
1015:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_FLAG != PWR_FLAG_UDRDY)
 786              		.loc 1 1015 3 view .LVU168
 787              		.loc 1 1015 6 is_stmt 0 view .LVU169
 788 0000 B0F5402F 		cmp	r0, #786432
 789 0004 05D0     		beq	.L66
1016:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
1017:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |=  PWR_FLAG << 2;
 790              		.loc 1 1017 5 is_stmt 1 view .LVU170
ARM GAS  /tmp/cc4Gy3j8.s 			page 40


 791              		.loc 1 1017 13 is_stmt 0 view .LVU171
 792 0006 064A     		ldr	r2, .L68
 793 0008 1368     		ldr	r3, [r2]
 794 000a 43EA8000 		orr	r0, r3, r0, lsl #2
 795              	.LVL39:
 796              		.loc 1 1017 13 view .LVU172
 797 000e 1060     		str	r0, [r2]
 798 0010 7047     		bx	lr
 799              	.LVL40:
 800              	.L66:
1018:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
1019:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
1020:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
1021:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CSR |= PWR_FLAG_UDRDY;
 801              		.loc 1 1021 5 is_stmt 1 view .LVU173
 802              		.loc 1 1021 14 is_stmt 0 view .LVU174
 803 0012 034A     		ldr	r2, .L68
 804 0014 5368     		ldr	r3, [r2, #4]
 805 0016 43F44023 		orr	r3, r3, #786432
 806 001a 5360     		str	r3, [r2, #4]
1022:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
1023:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
1024:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
1025:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F410xx) || defined (STM32F41
1026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
1027:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif /* STM32F40_41xxx  || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_
1028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 807              		.loc 1 1028 1 view .LVU175
 808 001c 7047     		bx	lr
 809              	.L69:
 810 001e 00BF     		.align	2
 811              	.L68:
 812 0020 00700040 		.word	1073770496
 813              		.cfi_endproc
 814              	.LFE140:
 816              		.text
 817              	.Letext0:
 818              		.file 3 "/home/ktkuri/arm-gcc-tools/arm-none-eabi/include/machine/_default_types.h"
 819              		.file 4 "/home/ktkuri/arm-gcc-tools/arm-none-eabi/include/sys/_stdint.h"
 820              		.file 5 "Libraries/CMSIS/Include/core_cm4.h"
 821              		.file 6 "Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 822              		.file 7 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc4Gy3j8.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_pwr.c
     /tmp/cc4Gy3j8.s:18     .text.PWR_DeInit:0000000000000000 $t
     /tmp/cc4Gy3j8.s:26     .text.PWR_DeInit:0000000000000000 PWR_DeInit
     /tmp/cc4Gy3j8.s:54     .text.PWR_BackupAccessCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:61     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
     /tmp/cc4Gy3j8.s:79     .text.PWR_BackupAccessCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:84     .text.PWR_PVDLevelConfig:0000000000000000 $t
     /tmp/cc4Gy3j8.s:91     .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
     /tmp/cc4Gy3j8.s:122    .text.PWR_PVDLevelConfig:0000000000000010 $d
     /tmp/cc4Gy3j8.s:127    .text.PWR_PVDCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:134    .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
     /tmp/cc4Gy3j8.s:152    .text.PWR_PVDCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:157    .text.PWR_WakeUpPinCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:164    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
     /tmp/cc4Gy3j8.s:182    .text.PWR_WakeUpPinCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:187    .text.PWR_BackupRegulatorCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:194    .text.PWR_BackupRegulatorCmd:0000000000000000 PWR_BackupRegulatorCmd
     /tmp/cc4Gy3j8.s:212    .text.PWR_BackupRegulatorCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:217    .text.PWR_MainRegulatorModeConfig:0000000000000000 $t
     /tmp/cc4Gy3j8.s:224    .text.PWR_MainRegulatorModeConfig:0000000000000000 PWR_MainRegulatorModeConfig
     /tmp/cc4Gy3j8.s:255    .text.PWR_MainRegulatorModeConfig:0000000000000010 $d
     /tmp/cc4Gy3j8.s:260    .text.PWR_OverDriveCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:267    .text.PWR_OverDriveCmd:0000000000000000 PWR_OverDriveCmd
     /tmp/cc4Gy3j8.s:285    .text.PWR_OverDriveCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:290    .text.PWR_OverDriveSWCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:297    .text.PWR_OverDriveSWCmd:0000000000000000 PWR_OverDriveSWCmd
     /tmp/cc4Gy3j8.s:315    .text.PWR_OverDriveSWCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:320    .text.PWR_UnderDriveCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:327    .text.PWR_UnderDriveCmd:0000000000000000 PWR_UnderDriveCmd
     /tmp/cc4Gy3j8.s:358    .text.PWR_UnderDriveCmd:000000000000001c $d
     /tmp/cc4Gy3j8.s:363    .text.PWR_MainRegulatorUnderDriveCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:370    .text.PWR_MainRegulatorUnderDriveCmd:0000000000000000 PWR_MainRegulatorUnderDriveCmd
     /tmp/cc4Gy3j8.s:399    .text.PWR_MainRegulatorUnderDriveCmd:0000000000000014 $d
     /tmp/cc4Gy3j8.s:404    .text.PWR_LowRegulatorUnderDriveCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:411    .text.PWR_LowRegulatorUnderDriveCmd:0000000000000000 PWR_LowRegulatorUnderDriveCmd
     /tmp/cc4Gy3j8.s:440    .text.PWR_LowRegulatorUnderDriveCmd:0000000000000014 $d
     /tmp/cc4Gy3j8.s:445    .text.PWR_FlashPowerDownCmd:0000000000000000 $t
     /tmp/cc4Gy3j8.s:452    .text.PWR_FlashPowerDownCmd:0000000000000000 PWR_FlashPowerDownCmd
     /tmp/cc4Gy3j8.s:470    .text.PWR_FlashPowerDownCmd:0000000000000008 $d
     /tmp/cc4Gy3j8.s:475    .text.PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cc4Gy3j8.s:482    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
     /tmp/cc4Gy3j8.s:567    .text.PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/cc4Gy3j8.s:575    .text.PWR_EnterUnderDriveSTOPMode:0000000000000000 $t
     /tmp/cc4Gy3j8.s:582    .text.PWR_EnterUnderDriveSTOPMode:0000000000000000 PWR_EnterUnderDriveSTOPMode
     /tmp/cc4Gy3j8.s:666    .text.PWR_EnterUnderDriveSTOPMode:0000000000000030 $d
     /tmp/cc4Gy3j8.s:674    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cc4Gy3j8.s:681    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
     /tmp/cc4Gy3j8.s:719    .text.PWR_EnterSTANDBYMode:0000000000000018 $d
     /tmp/cc4Gy3j8.s:725    .text.PWR_GetFlagStatus:0000000000000000 $t
     /tmp/cc4Gy3j8.s:732    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
     /tmp/cc4Gy3j8.s:765    .text.PWR_GetFlagStatus:0000000000000010 $d
     /tmp/cc4Gy3j8.s:770    .text.PWR_ClearFlag:0000000000000000 $t
     /tmp/cc4Gy3j8.s:777    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
     /tmp/cc4Gy3j8.s:812    .text.PWR_ClearFlag:0000000000000020 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/cc4Gy3j8.s 			page 42


RCC_APB1PeriphResetCmd
